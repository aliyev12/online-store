{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/UpdateItem.js\";\nimport React, { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nexport const SINGLE_ITEM_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\nexport const UPDATE_ITEM_MUTATION = gql`\n  mutation UPDATE_ITEM_MUTATION(\n    $id: ID!\n    $title: String\n    $description: String\n    $price: Int\n  ) {\n    updateItem(\n      id: $id\n      title: $title\n      description: $description\n      price: $price\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateItem = props => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [price, setPrice] = useState(0);\n\n  const handleUpdateItem = async (e, updateItemMutation) => {\n    e.preventDefault();\n    const variables = {\n      id: props.id\n    };\n    title ? variables.title = title : null;\n    description ? variables.description = description : null;\n    price ? variables.price = price : null;\n    const res = await updateItemMutation({\n      variables\n    });\n  };\n\n  const {\n    data,\n    loading: queryLoading\n  } = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: props.id\n    }\n  });\n  const [updateItem, {\n    loading: mutationLoading,\n    error\n  }] = useMutation(UPDATE_ITEM_MUTATION, {\n    variables: {\n      title,\n      description,\n      price\n    }\n  });\n  if (!data.item) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"No item for ID \", props.id);\n  return React.createElement(React.Fragment, null, queryLoading && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Loading...\"), React.createElement(Form, {\n    onSubmit: e => handleUpdateItem(e, updateItem),\n    method: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    disabled: mutationLoading,\n    \"aria-busy\": mutationLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Title\", React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.item.title,\n    onChange: e => setTitle(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Price\", React.createElement(\"input\", {\n    type: \"number\",\n    id: \"price\",\n    name: \"price\",\n    placeholder: \"Price\",\n    required: true,\n    defaultValue: data.item.price,\n    onChange: e => setPrice(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Description\", React.createElement(\"textarea\", {\n    id: \"description\",\n    name: \"description\",\n    placeholder: \"Enter a Description\",\n    required: true,\n    defaultValue: data.item.description,\n    onChange: e => setDescription(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Sav\", mutationLoading ? 'ing' : 'e', \" Changes\"))));\n};\n\nexport default UpdateItem; // import React, { useState } from 'react';\n// import { Mutation, Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// export const SINGLE_ITEM_QUERY = gql`\n//   query SINGLE_ITEM_QUERY($id: ID!) {\n//     item(where: { id: $id }) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n// export const UPDATE_ITEM_MUTATION = gql`\n//   mutation UPDATE_ITEM_MUTATION(\n//     $id: ID!\n//     $title: String\n//     $description: String\n//     $price: Int\n//   ) {\n//     updateItem(\n//       id: $id\n//       title: $title\n//       description: $description\n//       price: $price\n//     ) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n// const UpdateItem = props => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [price, setPrice] = useState(0);\n//   const handleUpdateItem = async (e, updateItemMutation) => {\n//     e.preventDefault();\n//     console.log('updating item..');\n//     const variables = {\n//       id: props.id,\n//     };\n//     title ? variables.title = title : null;\n//     description ? variables.description = description : null;\n//     price ? variables.price = price : null;\n//     console.log('variables = ', variables);\n//     const res = await updateItemMutation({ variables });\n//   }\n//   return (\n//     <Query query={SINGLE_ITEM_QUERY} variables={{ id: props.id }}>\n//       {({ data, loading }) => {\n//         if (loading) <p>Loading...</p>;\n//         if (!data.item) return <p>No item for ID {props.id}</p>\n//         return (\n//           <Mutation\n//             mutation={UPDATE_ITEM_MUTATION}\n//             variables={{\n//               title,\n//               description,\n//               price\n//             }}\n//           >\n//             {(updateItem, { loading, error }) => (\n//               <Form onSubmit={e => handleUpdateItem(e, updateItem)} method=\"post\">\n//                 <Error error={error} />\n//                 <fieldset disabled={loading} aria-busy={loading}>\n//                   <label htmlFor=\"title\">\n//                     Title\n//                     <input\n//                       type=\"text\"\n//                       id=\"title\"\n//                       name=\"title\"\n//                       placeholder=\"Title\"\n//                       required\n//                       defaultValue={data.item.title}\n//                       onChange={e => setTitle(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"price\">\n//                     Price\n//                     <input\n//                       type=\"number\"\n//                       id=\"price\"\n//                       name=\"price\"\n//                       placeholder=\"Price\"\n//                       required\n//                       defaultValue={data.item.price}\n//                       onChange={e => setPrice(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"title\">\n//                     Description\n//                     <textarea\n//                       id=\"description\"\n//                       name=\"description\"\n//                       placeholder=\"Enter a Description\"\n//                       required\n//                       defaultValue={data.item.description}\n//                       onChange={e => setDescription(e.target.value)}\n//                     />\n//                   </label>\n//                   <button type=\"submit\">Sav{loading ? 'ing' : 'e'} Changes</button>\n//                 </fieldset>\n//               </Form>\n//             )}\n//           </Mutation>\n//         );\n//       }}\n//     </Query>\n//   );\n// };\n// export default UpdateItem;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/UpdateItem.js"],"names":["React","useState","useQuery","useMutation","gql","Router","Form","formatMoney","Error","SINGLE_ITEM_QUERY","UPDATE_ITEM_MUTATION","UpdateItem","props","title","setTitle","description","setDescription","price","setPrice","handleUpdateItem","e","updateItemMutation","preventDefault","variables","id","res","data","loading","queryLoading","updateItem","mutationLoading","error","item","target","value"],"mappings":"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":["import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\nexport const SINGLE_ITEM_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nexport const UPDATE_ITEM_MUTATION = gql`\n  mutation UPDATE_ITEM_MUTATION(\n    $id: ID!\n    $title: String\n    $description: String\n    $price: Int\n  ) {\n    updateItem(\n      id: $id\n      title: $title\n      description: $description\n      price: $price\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateItem = props => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [price, setPrice] = useState(0);\n\n  const handleUpdateItem = async (e, updateItemMutation) => {\n    e.preventDefault();\n    const variables = {\n      id: props.id\n    };\n    title ? (variables.title = title) : null;\n    description ? (variables.description = description) : null;\n    price ? (variables.price = price) : null;\n    const res = await updateItemMutation({ variables });\n  };\n  const { data, loading: queryLoading } = useQuery(SINGLE_ITEM_QUERY, {\n    variables: { id: props.id }\n  });\n  const [updateItem, { loading: mutationLoading, error }] = useMutation(\n    UPDATE_ITEM_MUTATION,\n    {\n      variables: {\n        title,\n        description,\n        price\n      }\n    }\n  );\n  if (!data.item) return <p>No item for ID {props.id}</p>;\n  return (\n    <>\n      {queryLoading && <p>Loading...</p>}\n      <Form onSubmit={e => handleUpdateItem(e, updateItem)} method=\"post\">\n        <Error error={error} />\n        <fieldset disabled={mutationLoading} aria-busy={mutationLoading}>\n          <label htmlFor=\"title\">\n            Title\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              placeholder=\"Title\"\n              required\n              defaultValue={data.item.title}\n              onChange={e => setTitle(e.target.value)}\n            />\n          </label>\n          <label htmlFor=\"price\">\n            Price\n            <input\n              type=\"number\"\n              id=\"price\"\n              name=\"price\"\n              placeholder=\"Price\"\n              required\n              defaultValue={data.item.price}\n              onChange={e => setPrice(e.target.value)}\n            />\n          </label>\n          <label htmlFor=\"title\">\n            Description\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"Enter a Description\"\n              required\n              defaultValue={data.item.description}\n              onChange={e => setDescription(e.target.value)}\n            />\n          </label>\n          <button type=\"submit\">\n            Sav{mutationLoading ? 'ing' : 'e'} Changes\n          </button>\n        </fieldset>\n      </Form>\n    </>\n  );\n};\n\nexport default UpdateItem;\n// import React, { useState } from 'react';\n// import { Mutation, Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n\n// export const SINGLE_ITEM_QUERY = gql`\n//   query SINGLE_ITEM_QUERY($id: ID!) {\n//     item(where: { id: $id }) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n\n// export const UPDATE_ITEM_MUTATION = gql`\n//   mutation UPDATE_ITEM_MUTATION(\n//     $id: ID!\n//     $title: String\n//     $description: String\n//     $price: Int\n//   ) {\n//     updateItem(\n//       id: $id\n//       title: $title\n//       description: $description\n//       price: $price\n//     ) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n\n// const UpdateItem = props => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [price, setPrice] = useState(0);\n\n//   const handleUpdateItem = async (e, updateItemMutation) => {\n//     e.preventDefault();\n//     console.log('updating item..');\n//     const variables = {\n//       id: props.id,\n//     };\n//     title ? variables.title = title : null;\n//     description ? variables.description = description : null;\n//     price ? variables.price = price : null;\n//     console.log('variables = ', variables);\n//     const res = await updateItemMutation({ variables });\n//   }\n\n//   return (\n//     <Query query={SINGLE_ITEM_QUERY} variables={{ id: props.id }}>\n//       {({ data, loading }) => {\n//         if (loading) <p>Loading...</p>;\n//         if (!data.item) return <p>No item for ID {props.id}</p>\n//         return (\n//           <Mutation\n//             mutation={UPDATE_ITEM_MUTATION}\n//             variables={{\n//               title,\n//               description,\n//               price\n//             }}\n//           >\n//             {(updateItem, { loading, error }) => (\n//               <Form onSubmit={e => handleUpdateItem(e, updateItem)} method=\"post\">\n//                 <Error error={error} />\n//                 <fieldset disabled={loading} aria-busy={loading}>\n//                   <label htmlFor=\"title\">\n//                     Title\n//                     <input\n//                       type=\"text\"\n//                       id=\"title\"\n//                       name=\"title\"\n//                       placeholder=\"Title\"\n//                       required\n//                       defaultValue={data.item.title}\n//                       onChange={e => setTitle(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"price\">\n//                     Price\n//                     <input\n//                       type=\"number\"\n//                       id=\"price\"\n//                       name=\"price\"\n//                       placeholder=\"Price\"\n//                       required\n//                       defaultValue={data.item.price}\n//                       onChange={e => setPrice(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"title\">\n//                     Description\n//                     <textarea\n//                       id=\"description\"\n//                       name=\"description\"\n//                       placeholder=\"Enter a Description\"\n//                       required\n//                       defaultValue={data.item.description}\n//                       onChange={e => setDescription(e.target.value)}\n//                     />\n//                   </label>\n//                   <button type=\"submit\">Sav{loading ? 'ing' : 'e'} Changes</button>\n//                 </fieldset>\n//               </Form>\n//             )}\n//           </Mutation>\n//         );\n//       }}\n//     </Query>\n//   );\n// };\n\n// export default UpdateItem;\n"]},"metadata":{},"sourceType":"module"}