{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/Items.js\";\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport handleError from '../lib/handleError';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\nexport const ALL_ITEMS_QUERY = gql`\n  query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    items(first: $first, skip: $skip, orderBy: createAt_DESC) {\n      id\n      title\n      price\n      description\n      image\n      largeImage\n    }\n  }\n`;\nconst Center = styled.div.withConfig({\n  displayName: \"Items__Center\",\n  componentId: \"tikday-0\"\n})([\"text-align:center;\"]);\nconst ItemsList = styled.div.withConfig({\n  displayName: \"Items__ItemsList\",\n  componentId: \"tikday-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], props => props.theme.maxWidth);\n\nconst Items = ({\n  page\n}) => {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_ITEMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n  return React.createElement(Center, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Items!\"), React.createElement(Pagination, {\n    page: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), loading && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Loading...\"), error && handleError(error), !loading && !error && React.createElement(ItemsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, data.items.map(item => React.createElement(Item, {\n    key: item.id,\n    item: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))), React.createElement(Pagination, {\n    page: page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n};\n\nexport default Items; // import React from 'react';\n// import { Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import handleError from '../lib/handleError';\n// import styled from 'styled-components';\n// import Item from './Item';\n// import Pagination from './Pagination';\n// import {perPage} from '../config';\n// export const ALL_ITEMS_QUERY = gql`\n//   query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n//     items(first: $first, skip: $skip, orderBy: createAt_DESC) {\n//       id\n//       title\n//       price\n//       description\n//       image\n//       largeImage\n//     }\n//   }\n// `;\n// const Center = styled.div`\n//   text-align: center;\n// `;\n// const ItemsList = styled.div`\n//   display: grid;\n//   grid-template-columns: 1fr 1fr;\n//   grid-gap: 60px;\n//   max-width: ${props => props.theme.maxWidth};\n//   margin: 0 auto;\n// `;\n// const Items = ({ page }) => {\n//   return (\n//     <Center>\n//       <p>Items!</p>\n//       <Pagination page={page} />\n//       <Query\n//         query={ALL_ITEMS_QUERY}\n//         variables={{\n//           skip: page * perPage - perPage,\n//           first: perPage\n//         }}\n//       >\n//         {({ data, error, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (error) return <p>{handleError(error)}</p>;\n//           return (\n//             <ItemsList>\n//               {data.items.map(item => (\n//                 <Item key={item.id} item={item} />\n//               ))}\n//             </ItemsList>\n//           );\n//         }}\n//       </Query>\n//       <Pagination page={page} />\n//     </Center>\n//   );\n// };\n// export default Items;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/Items.js"],"names":["React","useQuery","gql","handleError","styled","Item","Pagination","perPage","ALL_ITEMS_QUERY","Center","div","ItemsList","props","theme","maxWidth","Items","page","data","error","loading","variables","skip","first","items","map","item","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,eAAe,GAAGN,GAAI;wDACqBK,OAAQ;;;;;;;;;;CADzD;AAaP,MAAME,MAAM,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,0BAAZ;AAIA,MAAMC,SAAS,GAAGP,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,+FAIAE,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QAJrB,CAAf;;AAQA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC1B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BlB,QAAQ,CAACO,eAAD,EAAkB;AACzDY,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEL,IAAI,GAAGT,OAAP,GAAiBA,OADd;AAETe,MAAAA,KAAK,EAAEf;AAFE;AAD8C,GAAlB,CAAzC;AAOA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAES,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGG,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHd,EAIGD,KAAK,IAAIf,WAAW,CAACe,KAAD,CAJvB,EAKG,CAACC,OAAD,IAAY,CAACD,KAAb,IACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAClB,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,IAAA,IAAI,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CANJ,EAYE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAET,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAgBD,CAxBD;;AA0BA,eAAeD,KAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport handleError from '../lib/handleError';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\n\nexport const ALL_ITEMS_QUERY = gql`\n  query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n    items(first: $first, skip: $skip, orderBy: createAt_DESC) {\n      id\n      title\n      price\n      description\n      image\n      largeImage\n    }\n  }\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst ItemsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width: ${props => props.theme.maxWidth};\n  margin: 0 auto;\n`;\n\nconst Items = ({ page }) => {\n  const { data, error, loading } = useQuery(ALL_ITEMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n\n  return (\n    <Center>\n      <p>Items!</p>\n      <Pagination page={page} />\n      {loading && <p>Loading...</p>}\n      {error && handleError(error)}\n      {!loading && !error && (\n        <ItemsList>\n          {data.items.map(item => (\n            <Item key={item.id} item={item} />\n          ))}\n        </ItemsList>\n      )}\n      <Pagination page={page} />\n    </Center>\n  );\n};\n\nexport default Items;\n// import React from 'react';\n// import { Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import handleError from '../lib/handleError';\n// import styled from 'styled-components';\n// import Item from './Item';\n// import Pagination from './Pagination';\n// import {perPage} from '../config';\n\n// export const ALL_ITEMS_QUERY = gql`\n//   query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n//     items(first: $first, skip: $skip, orderBy: createAt_DESC) {\n//       id\n//       title\n//       price\n//       description\n//       image\n//       largeImage\n//     }\n//   }\n// `;\n\n// const Center = styled.div`\n//   text-align: center;\n// `;\n\n// const ItemsList = styled.div`\n//   display: grid;\n//   grid-template-columns: 1fr 1fr;\n//   grid-gap: 60px;\n//   max-width: ${props => props.theme.maxWidth};\n//   margin: 0 auto;\n// `;\n\n// const Items = ({ page }) => {\n//   return (\n//     <Center>\n//       <p>Items!</p>\n//       <Pagination page={page} />\n//       <Query\n//         query={ALL_ITEMS_QUERY}\n//         variables={{\n//           skip: page * perPage - perPage,\n//           first: perPage\n//         }}\n//       >\n//         {({ data, error, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (error) return <p>{handleError(error)}</p>;\n\n//           return (\n//             <ItemsList>\n//               {data.items.map(item => (\n//                 <Item key={item.id} item={item} />\n//               ))}\n//             </ItemsList>\n//           );\n//         }}\n//       </Query>\n//       <Pagination page={page} />\n//     </Center>\n//   );\n// };\n\n// export default Items;\n"]},"metadata":{},"sourceType":"module"}