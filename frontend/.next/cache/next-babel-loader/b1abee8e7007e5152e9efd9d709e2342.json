{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/TakeMyMoney.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder($token: String!) {\\n    createOrder(token: $token) {\\n      id\\n      charge\\n      total\\n      items {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\nvar CREATE_ORDER_MUTATION = gql(_templateObject());\n\nvar TakeMyMoney = function TakeMyMoney(_ref) {\n  var children = _ref.children;\n\n  var _useMutation = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createOrder = _useMutation2[0];\n\n  var _useUser = useUser(),\n      me = _useUser.data.me;\n\n  var totalItems = function totalItems(cart) {\n    return cart.reduce(function (acc, cartItem) {\n      return acc + cartItem.quantity;\n    }, 0);\n  };\n\n  var onToken =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(res, create) {\n      var order;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              NProgress.start(); // Manually call the mutation once we have the stripe token\n\n              _context.next = 3;\n              return create({\n                variables: {\n                  token: res.id\n                }\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              });\n\n            case 3:\n              order = _context.sent;\n              Router.push({\n                pathname: '/order',\n                query: {\n                  id: order.data.createOrder.id\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onToken(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(StripeCheckout, {\n    amount: calcTotalPrice(me.cart),\n    name: \"Great Fits\",\n    description: \"Order of \".concat(totalItems(me.cart), \" item\").concat(totalItems(me.cart) === 1 ? '' : 's'),\n    image: idx(['cart', '0', 'item', 'image'], me) // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n    ,\n    stripeKey: \"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\",\n    currency: \"USD\",\n    email: me.email,\n    token: function token(res) {\n      return onToken(res, createOrder);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, children);\n};\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/TakeMyMoney.js"],"names":["React","StripeCheckout","useQuery","useMutation","Router","NProgress","gql","calcTotalPrice","Error","CURRENT_USER_QUERY","useUser","idx","CREATE_ORDER_MUTATION","TakeMyMoney","children","refetchQueries","query","createOrder","me","data","totalItems","cart","reduce","acc","cartItem","quantity","onToken","res","create","start","variables","token","id","err","alert","message","order","push","pathname","email"],"mappings":"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","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst TakeMyMoney = ({ children }) => {\n  const [createOrder] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{ query: CURRENT_USER_QUERY }]\n  });\n  const {\n    data: { me }\n  } = useUser();\n\n  const totalItems = cart =>\n    cart.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n\n  const onToken = async (res, create) => {\n    NProgress.start();\n    // Manually call the mutation once we have the stripe token\n    const order = await create({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id }\n    })\n  };\n\n  return (\n    <StripeCheckout\n      amount={calcTotalPrice(me.cart)}\n      name=\"Great Fits\"\n      description={`Order of ${totalItems(me.cart)} item${\n        totalItems(me.cart) === 1 ? '' : 's'\n      }`}\n      image={idx(['cart', '0', 'item', 'image'], me)}\n      // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n      stripeKey=\"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\"\n      currency=\"USD\"\n      email={me.email}\n      token={res => onToken(res, createOrder)}\n    >\n      {children}\n    </StripeCheckout>\n  );\n};\n\nexport default TakeMyMoney;\n"]},"metadata":{},"sourceType":"module"}