{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_ITEM_MUTATION(\\n    $id: ID!\\n    $title: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateItem(\\n      id: $id\\n      title: $title\\n      description: $description\\n      price: $price\\n    ) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ITEM_QUERY($id: ID!) {\\n    item(where: { id: $id }) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nexport var SINGLE_ITEM_QUERY = gql(_templateObject());\nexport var UPDATE_ITEM_MUTATION = gql(_templateObject2());\n\nvar UpdateItem = function UpdateItem(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      price = _useState6[0],\n      setPrice = _useState6[1];\n\n  var handleUpdateItem =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, updateItemMutation) {\n      var variables, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              variables = {\n                id: props.id\n              };\n              title ? variables.title = title : null;\n              description ? variables.description = description : null;\n              price ? variables.price = price : null;\n              _context.next = 7;\n              return updateItemMutation({\n                variables: variables\n              });\n\n            case 7:\n              res = _context.sent;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateItem(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: props.id\n    }\n  }),\n      data = _useQuery.data,\n      queryLoading = _useQuery.loading;\n\n  var _useMutation = useMutation(UPDATE_ITEM_MUTATION, {\n    variables: {\n      title: title,\n      description: description,\n      price: price\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateItem = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      mutationLoading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  if (!data.item) return React.createElement(\"p\", null, \"No item for ID \", props.id);\n  return React.createElement(React.Fragment, null, queryLoading && React.createElement(\"p\", null, \"Loading...\"), React.createElement(Form, {\n    onSubmit: function onSubmit(e) {\n      return handleUpdateItem(e, updateItem);\n    },\n    method: \"post\"\n  }, React.createElement(Error, {\n    error: error\n  }), React.createElement(\"fieldset\", {\n    disabled: mutationLoading,\n    \"aria-busy\": mutationLoading\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\"\n  }, \"Title\", React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    defaultValue: data.item.title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    }\n  })), React.createElement(\"label\", {\n    htmlFor: \"price\"\n  }, \"Price\", React.createElement(\"input\", {\n    type: \"number\",\n    id: \"price\",\n    name: \"price\",\n    placeholder: \"Price\",\n    required: true,\n    defaultValue: data.item.price,\n    onChange: function onChange(e) {\n      return setPrice(e.target.value);\n    }\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\"\n  }, \"Description\", React.createElement(\"textarea\", {\n    id: \"description\",\n    name: \"description\",\n    placeholder: \"Enter a Description\",\n    required: true,\n    defaultValue: data.item.description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    }\n  })), React.createElement(\"button\", {\n    type: \"submit\"\n  }, \"Sav\", mutationLoading ? 'ing' : 'e', \" Changes\"))));\n};\n\nexport default UpdateItem; // import React, { useState } from 'react';\n// import { Mutation, Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// export const SINGLE_ITEM_QUERY = gql`\n//   query SINGLE_ITEM_QUERY($id: ID!) {\n//     item(where: { id: $id }) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n// export const UPDATE_ITEM_MUTATION = gql`\n//   mutation UPDATE_ITEM_MUTATION(\n//     $id: ID!\n//     $title: String\n//     $description: String\n//     $price: Int\n//   ) {\n//     updateItem(\n//       id: $id\n//       title: $title\n//       description: $description\n//       price: $price\n//     ) {\n//       id\n//       title\n//       description\n//       price\n//     }\n//   }\n// `;\n// const UpdateItem = props => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [price, setPrice] = useState(0);\n//   const handleUpdateItem = async (e, updateItemMutation) => {\n//     e.preventDefault();\n//     console.log('updating item..');\n//     const variables = {\n//       id: props.id,\n//     };\n//     title ? variables.title = title : null;\n//     description ? variables.description = description : null;\n//     price ? variables.price = price : null;\n//     console.log('variables = ', variables);\n//     const res = await updateItemMutation({ variables });\n//   }\n//   return (\n//     <Query query={SINGLE_ITEM_QUERY} variables={{ id: props.id }}>\n//       {({ data, loading }) => {\n//         if (loading) <p>Loading...</p>;\n//         if (!data.item) return <p>No item for ID {props.id}</p>\n//         return (\n//           <Mutation\n//             mutation={UPDATE_ITEM_MUTATION}\n//             variables={{\n//               title,\n//               description,\n//               price\n//             }}\n//           >\n//             {(updateItem, { loading, error }) => (\n//               <Form onSubmit={e => handleUpdateItem(e, updateItem)} method=\"post\">\n//                 <Error error={error} />\n//                 <fieldset disabled={loading} aria-busy={loading}>\n//                   <label htmlFor=\"title\">\n//                     Title\n//                     <input\n//                       type=\"text\"\n//                       id=\"title\"\n//                       name=\"title\"\n//                       placeholder=\"Title\"\n//                       required\n//                       defaultValue={data.item.title}\n//                       onChange={e => setTitle(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"price\">\n//                     Price\n//                     <input\n//                       type=\"number\"\n//                       id=\"price\"\n//                       name=\"price\"\n//                       placeholder=\"Price\"\n//                       required\n//                       defaultValue={data.item.price}\n//                       onChange={e => setPrice(e.target.value)}\n//                     />\n//                   </label>\n//                   <label htmlFor=\"title\">\n//                     Description\n//                     <textarea\n//                       id=\"description\"\n//                       name=\"description\"\n//                       placeholder=\"Enter a Description\"\n//                       required\n//                       defaultValue={data.item.description}\n//                       onChange={e => setDescription(e.target.value)}\n//                     />\n//                   </label>\n//                   <button type=\"submit\">Sav{loading ? 'ing' : 'e'} Changes</button>\n//                 </fieldset>\n//               </Form>\n//             )}\n//           </Mutation>\n//         );\n//       }}\n//     </Query>\n//   );\n// };\n// export default UpdateItem;","map":null,"metadata":{},"sourceType":"module"}