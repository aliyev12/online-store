{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = \", \") {\\n    items(first: $first, skip: $skip, orderBy: createAt_DESC) {\\n      id\\n      title\\n      price\\n      description\\n      image\\n      largeImage\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport handleError from '../lib/handleError';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\nexport var ALL_ITEMS_QUERY = gql(_templateObject(), perPage);\nvar Center = styled.div.withConfig({\n  displayName: \"Items__Center\",\n  componentId: \"tikday-0\"\n})([\"text-align:center;\"]);\nvar ItemsList = styled.div.withConfig({\n  displayName: \"Items__ItemsList\",\n  componentId: \"tikday-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], function (props) {\n  return props.theme.maxWidth;\n});\n\nvar Items = function Items(_ref) {\n  var page = _ref.page;\n\n  var _useQuery = useQuery(ALL_ITEMS_QUERY, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  return React.createElement(Center, null, React.createElement(\"p\", null, \"Items!\"), React.createElement(Pagination, {\n    page: page\n  }), loading && React.createElement(\"p\", null, \"Loading...\"), error && handleError(error), !loading && !error && React.createElement(ItemsList, null, data.items.map(function (item) {\n    return React.createElement(Item, {\n      key: item.id,\n      item: item\n    });\n  })), React.createElement(Pagination, {\n    page: page\n  }));\n};\n\nexport default Items; // import React from 'react';\n// import { Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import handleError from '../lib/handleError';\n// import styled from 'styled-components';\n// import Item from './Item';\n// import Pagination from './Pagination';\n// import {perPage} from '../config';\n// export const ALL_ITEMS_QUERY = gql`\n//   query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = ${perPage}) {\n//     items(first: $first, skip: $skip, orderBy: createAt_DESC) {\n//       id\n//       title\n//       price\n//       description\n//       image\n//       largeImage\n//     }\n//   }\n// `;\n// const Center = styled.div`\n//   text-align: center;\n// `;\n// const ItemsList = styled.div`\n//   display: grid;\n//   grid-template-columns: 1fr 1fr;\n//   grid-gap: 60px;\n//   max-width: ${props => props.theme.maxWidth};\n//   margin: 0 auto;\n// `;\n// const Items = ({ page }) => {\n//   return (\n//     <Center>\n//       <p>Items!</p>\n//       <Pagination page={page} />\n//       <Query\n//         query={ALL_ITEMS_QUERY}\n//         variables={{\n//           skip: page * perPage - perPage,\n//           first: perPage\n//         }}\n//       >\n//         {({ data, error, loading }) => {\n//           if (loading) return <p>Loading...</p>;\n//           if (error) return <p>{handleError(error)}</p>;\n//           return (\n//             <ItemsList>\n//               {data.items.map(item => (\n//                 <Item key={item.id} item={item} />\n//               ))}\n//             </ItemsList>\n//           );\n//         }}\n//       </Query>\n//       <Pagination page={page} />\n//     </Center>\n//   );\n// };\n// export default Items;","map":null,"metadata":{},"sourceType":"module"}