{"ast":null,"code":"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport CURRENT_USER_QUERY from './User';\nconst RESET_MUTATION = gql`\n  mutation RESET_MUTATION(\n    $resetToken: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    resetPassword(\n      resetToken: $resetToken\n      password: $password\n      confirmPassword: $confirmPassword\n    ) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Reset = ({\n  resetToken\n}) => {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [resetPassword, {\n    loading,\n    error,\n    called\n  }] = useMutation(RESET_MUTATION, {\n    variables: {\n      resetToken,\n      password,\n      confirmPassword\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  return React.createElement(Form, {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault();\n      resetPassword();\n      setPassword('');\n      setConfirmPassword('');\n    }\n  }, React.createElement(\"fieldset\", null, React.createElement(\"h2\", null, \"Reset Your Password\"), React.createElement(Error, {\n    error: error\n  }), React.createElement(\"label\", {\n    htmlFor: \"password\"\n  }, \"Password\", React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value)\n  })), React.createElement(\"label\", {\n    htmlFor: \"confirmPassword\"\n  }, \"Confirm Password\", React.createElement(\"input\", {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: e => setConfirmPassword(e.target.value)\n  })), React.createElement(\"button\", {\n    type: \"submit\"\n  }, \"Reset Your Password!\")));\n};\n\nexport default Reset; // import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Form from './styles/Form';\n// import Error from './ErrorMessage';\n// import CURRENT_USER_QUERY from './User';\n// const RESET_MUTATION = gql`\n//   mutation RESET_MUTATION(\n//     $resetToken: String!\n//     $password: String!\n//     $confirmPassword: String!\n//   ) {\n//     resetPassword(\n//       resetToken: $resetToken\n//       password: $password\n//       confirmPassword: $confirmPassword\n//     ) {\n//       id\n//       email\n//       name\n//     }\n//   }\n// `;\n// const Reset = ({ resetToken }) => {\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   return (\n//     <Mutation\n//       mutation={RESET_MUTATION}\n//       variables={{\n//         resetToken,\n//         password,\n//         confirmPassword\n//       }}\n//       refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n//     >\n//       {(resetPassword, { loading, error, called }) => {\n//         return (\n//           <Form\n//             method=\"post\"\n//             onSubmit={async e => {\n//               e.preventDefault();\n//               resetPassword();\n//               setPassword('');\n//               setConfirmPassword('');\n//               console.log('====== here....');\n//             }}\n//           >\n//             {/* <fieldset disabled={loading} aria-busy={loading}> */}\n//             <fieldset >\n//               <h2>Reset Your Password</h2>\n//               <Error error={error} />\n//               <label htmlFor=\"password\">\n//                 Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"password\"\n//                   value={password}\n//                   onChange={e => setPassword(e.target.value)}\n//                 />\n//               </label>\n//               <label htmlFor=\"confirmPassword\">\n//                 Confirm Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"confirmPassword\"\n//                   value={confirmPassword}\n//                   onChange={e => setConfirmPassword(e.target.value)}\n//                 />\n//               </label>\n//               <button type=\"submit\">Reset Your Password!</button>\n//             </fieldset>\n//           </Form>\n//         );\n//       }}\n//     </Mutation>\n//   );\n// };\n// Reset.propTypes = {\n//   resetToken: PropTypes.string.isRequired\n// };\n// export default Reset;","map":null,"metadata":{},"sourceType":"module"}