{"ast":null,"code":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Error from './ErrorMessage';\nimport Table from './styles/Table';\nimport SickButton from './styles/SickButton';\nconst possiblePermissions = ['ADMIN', 'USER', 'ITEMCREATE', 'ITEMUPDATE', 'ITEMDELETE', 'PERMISSIONUPDATE'];\nconst UPDATE_PERMISSIONS_MUTATION = gql`\n  mutation updatePermissions($permissions: [Permission], $userId: ID!) {\n    updatePermissions(permissions: $permissions, userId: $userId) {\n      id\n      permissions\n      name\n      email\n    }\n  }\n`;\nconst ALL_USERS_QUERY = gql`\n  query {\n    users {\n      id\n      name\n      email\n      permissions\n    }\n  }\n`;\n\nconst Permissions = props => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_USERS_QUERY);\n  return console.log(data && data) || React.createElement(React.Fragment, null, React.createElement(Error, {\n    error: error\n  }), React.createElement(\"div\", null, React.createElement(\"h2\", null, \"Manage Permissions\"), React.createElement(Table, null, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Name\"), React.createElement(\"th\", null, \"Email\"), possiblePermissions.map(permission => React.createElement(\"th\", {\n    key: permission\n  }, permission)), React.createElement(\"th\", null, React.createElement(\"span\", {\n    role: \"image\"\n  }, \"\\uD83D\\uDC47\")))), React.createElement(\"tbody\", null, data && data.users && data.users.map(user => React.createElement(UserPermissions, {\n    key: user.id,\n    user: user\n  }))))));\n};\n\nconst UserPermissions = ({\n  user\n}) => {\n  const [permissions, setPermissions] = useState(user.permissions);\n\n  const handlePermissionChange = (e, updatePermissions) => {\n    const checkbox = e.target; // Tale a copy of the current permissions\n\n    let updatedPermissions = [...permissions]; // Figure out if you need to add or remove a permission\n\n    if (checkbox.checked) {\n      // Add it in\n      updatedPermissions.push(checkbox.value);\n    } else {\n      updatedPermissions = updatedPermissions.filter(permission => permission !== checkbox.value);\n    }\n\n    const setState = async () => await setPermissions(updatedPermissions);\n\n    setState().then(() => updatePermissions());\n  };\n\n  const [updatePermissions, {\n    loading,\n    error\n  }] = useMutation(UPDATE_PERMISSIONS_MUTATION, {\n    variables: {\n      permissions,\n      userId: user.id\n    }\n  });\n  return React.createElement(React.Fragment, null, error && React.createElement(\"tr\", null, React.createElement(\"td\", {\n    colSpan: \"8\"\n  }, React.createElement(Error, {\n    error: error\n  }))), React.createElement(\"tr\", null, React.createElement(\"td\", null, user.name), React.createElement(\"td\", null, user.email), possiblePermissions.map((permission, i) => React.createElement(\"td\", {\n    key: permission + i\n  }, React.createElement(\"label\", {\n    htmlFor: `${user.id}-permission-${permission}`\n  }, React.createElement(\"input\", {\n    id: `${user.id}-permission-${permission}`,\n    type: \"checkbox\",\n    checked: permissions.includes(permission),\n    value: permission,\n    onChange: e => handlePermissionChange(e, updatePermissions)\n  })))), React.createElement(\"td\", null, React.createElement(SickButton, {\n    type: \"button\",\n    disabled: loading,\n    onClick: updatePermissions\n  }, \"Updat\", loading ? 'ing' : 'e'))));\n};\n\nexport default Permissions; // import React, { useState } from 'react';\n// import { Query, Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import PropTypes from 'prop-types';\n// import Error from './ErrorMessage';\n// import Table from './styles/Table';\n// import SickButton from './styles/SickButton';\n// const possiblePermissions = [\n//   'ADMIN',\n//   'USER',\n//   'ITEMCREATE',\n//   'ITEMUPDATE',\n//   'ITEMDELETE',\n//   'PERMISSIONUPDATE'\n// ];\n// const UPDATE_PERMISSIONS_MUTATION = gql`\n//   mutation updatePermissions($permissions: [Permission], $userId: ID!) {\n//     updatePermissions(permissions: $permissions, userId: $userId) {\n//       id\n//       permissions\n//       name\n//       email\n//     }\n//   }\n// `;\n// const ALL_USERS_QUERY = gql`\n//   query {\n//     users {\n//       id\n//       name\n//       email\n//       permissions\n//     }\n//   }\n// `;\n// const Permissions = props => (\n//   <Query query={ALL_USERS_QUERY}>\n//     {({ data, loading, error }) =>\n//       console.log(data) || (\n//         <>\n//           <Error error={error} />\n//           <div>\n//             <h2>Manage Permissions</h2>\n//             <Table>\n//               <thead>\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Email</th>\n//                   {possiblePermissions.map(permission => (\n//                     <th key={permission}>{permission}</th>\n//                   ))}\n//                   <th>\n//                     <span role=\"image\">ðŸ‘‡</span>\n//                   </th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {data.users.map(user => (\n//                   <UserPermissions key={user.id} user={user} />\n//                 ))}\n//               </tbody>\n//             </Table>\n//           </div>\n//         </>\n//       )\n//     }\n//   </Query>\n// );\n// const UserPermissions = ({ user }) => {\n//   const [permissions, setPermissions] = useState(user.permissions);\n//   const handlePermissionChange = (e, updatePermissions) => {\n//     const checkbox = e.target;\n//     // Tale a copy of the current permissions\n//     let updatedPermissions = [...permissions];\n//     // Figure out if you need to add or remove a permission\n//     if (checkbox.checked) {\n//       // Add it in\n//       updatedPermissions.push(checkbox.value);\n//     } else {\n//       updatedPermissions = updatedPermissions.filter(\n//         permission => permission !== checkbox.value\n//       );\n//     }\n//     const setState = async () => await setPermissions(updatedPermissions);\n//     setState().then(() => updatePermissions());\n//     };\n//   return (\n//     <Mutation\n//       mutation={UPDATE_PERMISSIONS_MUTATION}\n//       variables={{\n//         permissions,\n//         userId: user.id\n//       }}\n//     >\n//       {(updatePermissions, { loading, error }) => (\n//         <>\n//           {error && (\n//             <tr>\n//               <td colSpan=\"8\">\n//                 <Error error={error} />\n//               </td>\n//             </tr>\n//           )}\n//           <tr>\n//             <td>{user.name}</td>\n//             <td>{user.email}</td>\n//             {possiblePermissions.map((permission, i) => (\n//               <td key={permission + i}>\n//                 <label htmlFor={`${user.id}-permission-${permission}`}>\n//                   <input\n//                     id={`${user.id}-permission-${permission}`}\n//                     type=\"checkbox\"\n//                     checked={permissions.includes(permission)}\n//                     value={permission}\n//                     onChange={e => handlePermissionChange(e, updatePermissions)}\n//                   />\n//                 </label>\n//               </td>\n//             ))}\n//             <td>\n//               <SickButton\n//                 type=\"button\"\n//                 disabled={loading}\n//                 onClick={updatePermissions}\n//               >\n//                 Updat{loading ? 'ing' : 'e'}\n//               </SickButton>\n//             </td>\n//           </tr>\n//         </>\n//       )}\n//     </Mutation>\n//   );\n// };\n// UserPermissions.propTypes = {\n//   user: PropTypes.shape({\n//     name: PropTypes.string,\n//     email: PropTypes.string,\n//     id: PropTypes.string,\n//     permissions: PropTypes.array\n//   }).isRequired\n// };\n// export default Permissions;","map":null,"metadata":{},"sourceType":"module"}