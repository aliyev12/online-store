{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst AutoComplete = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const client = useApolloClient();\n  const onChange = debounce(async (e, client) => {\n    // Turn loading on\n    setLoading(true); // Manually query apollo client\n\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: {\n        searchTerm: e.target.value\n      }\n    });\n    setItems(res.data.items);\n    setLoading(false);\n  }, 350);\n\n  const routeToItem = item => {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  }; // To get rid of the aria-label warning in console:\n\n\n  resetIdCounter();\n  return React.createElement(SearchStyles, null, React.createElement(Downshift, {\n    onChange: routeToItem,\n    itemToString: item => item === null ? '' : item.title\n  }, ({\n    getInputProps,\n    getItemProps,\n    isOpen,\n    inputValue,\n    highlightedIndex\n  }) => React.createElement(\"div\", null, React.createElement(\"input\", _extends({\n    type: \"search\"\n  }, getInputProps({\n    type: 'search',\n    placeholder: 'Search For An Item',\n    id: 'search',\n    className: loading ? 'loading' : '',\n    onChange: e => {\n      e.persist();\n      onChange(e, client);\n    }\n  }))), isOpen && React.createElement(DropDown, null, items.map((item, index) => React.createElement(DropDownItem, _extends({}, getItemProps({\n    item\n  }), {\n    key: item.id,\n    highlighted: index === highlightedIndex\n  }), React.createElement(\"img\", {\n    width: \"50\",\n    src: item.image,\n    alt: item.title\n  }), item.title)), !items.length && !loading && React.createElement(DropDownItem, null, \"Nothing Found For \", inputValue)))));\n};\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}