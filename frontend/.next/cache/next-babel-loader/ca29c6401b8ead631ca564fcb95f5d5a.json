{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\\n    items(\\n      where: {\\n        OR: [\\n          { title_contains: $searchTerm }\\n          { description_contains: $searchTerm }\\n        ]\\n      }\\n    ) {\\n      id\\n      image\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nvar SEARCH_ITEMS_QUERY = gql(_templateObject());\n\nvar AutoComplete = function AutoComplete() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var client = useApolloClient();\n\n  var _onChange = debounce(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, client) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Turn loading on\n              setLoading(true); // Manually query apollo client\n\n              _context.next = 3;\n              return client.query({\n                query: SEARCH_ITEMS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              });\n\n            case 3:\n              res = _context.sent;\n              setItems(res.data.items);\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), 350);\n\n  var routeToItem = function routeToItem(item) {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  }; // To get rid of the aria-label warning in console:\n\n\n  resetIdCounter();\n  return React.createElement(SearchStyles, null, React.createElement(Downshift, {\n    onChange: routeToItem,\n    itemToString: function itemToString(item) {\n      return item === null ? '' : item.title;\n    }\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        getItemProps = _ref2.getItemProps,\n        isOpen = _ref2.isOpen,\n        inputValue = _ref2.inputValue,\n        highlightedIndex = _ref2.highlightedIndex;\n    return React.createElement(\"div\", null, React.createElement(\"input\", _extends({\n      type: \"search\"\n    }, getInputProps({\n      type: 'search',\n      placeholder: 'Search For An Item',\n      id: 'search',\n      className: loading ? 'loading' : '',\n      onChange: function onChange(e) {\n        e.persist();\n\n        _onChange(e, client);\n      }\n    }))), isOpen && React.createElement(DropDown, null, items.map(function (item, index) {\n      return React.createElement(DropDownItem, _extends({}, getItemProps({\n        item: item\n      }), {\n        key: item.id,\n        highlighted: index === highlightedIndex\n      }), React.createElement(\"img\", {\n        width: \"50\",\n        src: item.image,\n        alt: item.title\n      }), item.title);\n    }), !items.length && !loading && React.createElement(DropDownItem, null, \"Nothing Found For \", inputValue)));\n  }));\n};\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}