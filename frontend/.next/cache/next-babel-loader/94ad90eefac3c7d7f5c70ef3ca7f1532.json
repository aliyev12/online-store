{"ast":null,"code":"import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst TakeMyMoney = ({\n  children\n}) => {\n  const [createOrder] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  const {\n    data: {\n      me\n    }\n  } = useUser();\n\n  const totalItems = cart => cart.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n\n  const onToken = async (res, create) => {\n    NProgress.start(); // Manually call the mutation once we have the stripe token\n\n    const order = await create({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.createOrder.id\n      }\n    });\n  };\n\n  return React.createElement(StripeCheckout, {\n    amount: calcTotalPrice(me.cart),\n    name: \"Great Fits\",\n    description: `Order of ${totalItems(me.cart)} item${totalItems(me.cart) === 1 ? '' : 's'}`,\n    image: idx(['cart', '0', 'item', 'image'], me) // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n    ,\n    stripeKey: \"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\",\n    currency: \"USD\",\n    email: me.email,\n    token: res => onToken(res, createOrder)\n  }, children);\n};\n\nexport default TakeMyMoney;","map":null,"metadata":{},"sourceType":"module"}