{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Order.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport { gql } from 'apollo-boost';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nconst Order = ({\n  id\n}) => {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_ORDER_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (error) return React.createElement(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Loading...\");\n  const order = data.order;\n  if (!order) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"This order doesn't exist\");\n  return React.createElement(OrderStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Sick Fits - Order \", order.id)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Order ID:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, id)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Charge\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, order.charge)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Date\"), console.log('date = ', order.createdAt), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, format(new Date(order.createdAt), 'yyyy-MM-dd')), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, format(new Date(order.createdAt), 'MMMM d, yyyy h:mm A'))));\n};\n\nOrder.propTypes = {\n  id: PropTypes.string.isRequired\n};\nexport default Order;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Order.js"],"names":["React","PropTypes","useQuery","format","Head","gql","formatMoney","Error","OrderStyles","SINGLE_ORDER_QUERY","Order","id","data","error","loading","variables","order","charge","console","log","createdAt","Date","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,MAAMC,kBAAkB,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;;CAA/B;;AAsBA,MAAMK,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACxB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BZ,QAAQ,CAACO,kBAAD,EAAqB;AAC5DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADiD,GAArB,CAAzC;AAGA,MAAIE,KAAJ,EAAW,OAAO,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,QAAME,KAAK,GAAGJ,IAAI,CAACI,KAAnB;AACA,MAAI,CAACA,KAAL,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACZ,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0BA,KAAK,CAACL,EAAhC,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,EAAP,CAFF,CAJF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOK,KAAK,CAACC,MAAb,CAFF,CARF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAK,CAACI,SAA7B,CAFH,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOjB,MAAM,CAAC,IAAIkB,IAAJ,CAASL,KAAK,CAACI,SAAf,CAAD,EAA4B,YAA5B,CAAb,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOjB,MAAM,CAAC,IAAIkB,IAAJ,CAASL,KAAK,CAACI,SAAf,CAAD,EAA4B,qBAA5B,CAAb,CALF,CAZF,CADF;AAsBD,CA9BD;;AAgCAV,KAAK,CAACY,SAAN,GAAkB;AAChBX,EAAAA,EAAE,EAAEV,SAAS,CAACsB,MAAV,CAAiBC;AADL,CAAlB;AAIA,eAAed,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport { gql } from 'apollo-boost';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\n\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nconst Order = ({ id }) => {\n  const { data, error, loading } = useQuery(SINGLE_ORDER_QUERY, {\n    variables: { id }\n  });\n  if (error) return <Error error={error} />;\n  if (loading) return <p>Loading...</p>;\n  const order = data.order;\n  if (!order) return <p>This order doesn't exist</p>;\n  return (\n    <OrderStyles>\n      <Head>\n        <title>Sick Fits - Order {order.id}</title>\n      </Head>\n      <p>\n        <span>Order ID:</span>\n        <span>{id}</span>\n      </p>\n      <p>\n        <span>Charge</span>\n        <span>{order.charge}</span>\n      </p>\n      <p>\n        <span>Date</span>\n        {console.log('date = ', order.createdAt)}\n        {/* <span>{format(new Date(order.createdAt), 'MM/DD/YYYY')}</span> */}\n        <span>{format(new Date(order.createdAt), 'yyyy-MM-dd')}</span>\n        <span>{format(new Date(order.createdAt), 'MMMM d, yyyy h:mm A')}</span>\n      </p>\n    </OrderStyles>\n  );\n};\n\nOrder.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport default Order;\n"]},"metadata":{},"sourceType":"module"}