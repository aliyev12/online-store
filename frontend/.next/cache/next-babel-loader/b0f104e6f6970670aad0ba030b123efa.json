{"ast":null,"code":"// Check deeply nested props\n\n/* Example:\nconst user = {\n  posts: [\n    {title: 'Title', comment: 'Comment'}\n  ]\n}\nidx(['posts', '0', 'title'], user) // returns 'Title'\nidx(['posts', '2', 'title'], user) // returns 'null' because there is no index 2 in posts\n*/\nexport var idx = function idx(p, o) {\n  return p.reduce(function (xs, x) {\n    return xs && xs[x] ? xs[x] : null;\n  }, o);\n};","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/lib/helpers.js"],"names":["idx","p","o","reduce","xs","x"],"mappings":"AAAA;;AACA;;;;;;;;;AASA,OAAO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,CAACE,MAAF,CAAS,UAACC,EAAD,EAAKC,CAAL;AAAA,WAAYD,EAAE,IAAIA,EAAE,CAACC,CAAD,CAAT,GAAgBD,EAAE,CAACC,CAAD,CAAlB,GAAwB,IAAnC;AAAA,GAAT,EAAkDH,CAAlD,CAAV;AAAA,CAAZ","sourcesContent":["// Check deeply nested props\n/* Example:\nconst user = {\n  posts: [\n    {title: 'Title', comment: 'Comment'}\n  ]\n}\nidx(['posts', '0', 'title'], user) // returns 'Title'\nidx(['posts', '2', 'title'], user) // returns 'null' because there is no index 2 in posts\n*/\nexport const idx = (p, o) => p.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, o);"]},"metadata":{},"sourceType":"module"}