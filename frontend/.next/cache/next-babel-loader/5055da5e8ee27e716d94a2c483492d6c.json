{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Signin.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from './User';\nconst SIGNIN_MUTATION = gql`\n  mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n    signin(email: $email, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Signin = () => {\n  const [inputs, setInputs] = useState({\n    email: '',\n    name: '',\n    password: ''\n  });\n  const [signup, {\n    error,\n    loading\n  }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  const handleFormField = ({\n    target\n  }) => {\n    setInputs(_objectSpread({}, inputs, {\n      [target.name]: target.value\n    }));\n  };\n\n  return React.createElement(Form, {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault();\n      const res = await signup();\n      setInputs(_objectSpread({}, inputs, {\n        email: '',\n        name: '',\n        password: ''\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Sign Into Your Account\"), React.createElement(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Email\", React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    value: inputs.email,\n    onChange: handleFormField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Password\", React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: inputs.password,\n    onChange: handleFormField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Sign In!\")));\n};\n\nexport default Signin; // import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Form from './styles/Form';\n// import Error from './ErrorMessage';\n// import { CURRENT_USER_QUERY } from './User';\n// const SIGNIN_MUTATION = gql`\n//   mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n//     signin(email: $email, password: $password) {\n//       id\n//       email\n//       name\n//     }\n//   }\n// `;\n// const Signin = () => {\n//   const [inputs, setInputs] = useState({\n//     email: '',\n//     name: '',\n//     password: ''\n//   });\n//   const handleFormField = ({ target }) => {\n//     setInputs({\n//       ...inputs,\n//       [target.name]: target.value\n//     });\n//   };\n//   return (\n//     <Mutation\n//       mutation={SIGNIN_MUTATION}\n//       variables={inputs}\n//       refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n//     >\n//       {(signup, { error, loading }) => {\n//         return (\n//           <Form\n//             method=\"post\"\n//             onSubmit={async e => {\n//               e.preventDefault();\n//               const res = await signup();\n//               setInputs({\n//                 ...inputs,\n//                 email: '',\n//                 name: '',\n//                 password: ''\n//               });\n//             }}\n//           >\n//             <fieldset disabled={loading} aria-busy={loading}>\n//               <h2>Sign Into Your Account</h2>\n//               <Error error={error} />\n//               <label htmlFor=\"email\">\n//                 Email\n//                 <input\n//                   type=\"email\"\n//                   name=\"email\"\n//                   placeholder=\"Email\"\n//                   value={inputs.email}\n//                   onChange={handleFormField}\n//                 />\n//               </label>\n//               <label htmlFor=\"password\">\n//                 Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"password\"\n//                   value={inputs.password}\n//                   onChange={handleFormField}\n//                 />\n//               </label>\n//               <button type=\"submit\">Sign In!</button>\n//             </fieldset>\n//           </Form>\n//         );\n//       }}\n//     </Mutation>\n//   );\n// };\n// export default Signin;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Signin.js"],"names":["React","useState","useMutation","gql","Form","Error","CURRENT_USER_QUERY","SIGNIN_MUTATION","Signin","inputs","setInputs","email","name","password","signup","error","loading","variables","refetchQueries","query","handleFormField","target","value","e","preventDefault","res"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst SIGNIN_MUTATION = gql`\n  mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n    signin(email: $email, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Signin = () => {\n  const [inputs, setInputs] = useState({\n    email: '',\n    name: '',\n    password: ''\n  });\n\n  const [signup, { error, loading }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    refetchQueries: [{ query: CURRENT_USER_QUERY }]\n  });\n\n  const handleFormField = ({ target }) => {\n    setInputs({\n      ...inputs,\n      [target.name]: target.value\n    });\n  };\n\n  return (\n    <Form\n      method=\"post\"\n      onSubmit={async e => {\n        e.preventDefault();\n        const res = await signup();\n        setInputs({\n          ...inputs,\n          email: '',\n          name: '',\n          password: ''\n        });\n      }}\n    >\n      <fieldset disabled={loading} aria-busy={loading}>\n        <h2>Sign Into Your Account</h2>\n        <Error error={error} />\n        <label htmlFor=\"email\">\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            value={inputs.email}\n            onChange={handleFormField}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={inputs.password}\n            onChange={handleFormField}\n          />\n        </label>\n        <button type=\"submit\">Sign In!</button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default Signin;\n\n// import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Form from './styles/Form';\n// import Error from './ErrorMessage';\n// import { CURRENT_USER_QUERY } from './User';\n\n// const SIGNIN_MUTATION = gql`\n//   mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n//     signin(email: $email, password: $password) {\n//       id\n//       email\n//       name\n//     }\n//   }\n// `;\n\n// const Signin = () => {\n//   const [inputs, setInputs] = useState({\n//     email: '',\n//     name: '',\n//     password: ''\n//   });\n\n//   const handleFormField = ({ target }) => {\n//     setInputs({\n//       ...inputs,\n//       [target.name]: target.value\n//     });\n//   };\n\n//   return (\n//     <Mutation\n//       mutation={SIGNIN_MUTATION}\n//       variables={inputs}\n//       refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n//     >\n//       {(signup, { error, loading }) => {\n//         return (\n//           <Form\n//             method=\"post\"\n//             onSubmit={async e => {\n//               e.preventDefault();\n//               const res = await signup();\n//               setInputs({\n//                 ...inputs,\n//                 email: '',\n//                 name: '',\n//                 password: ''\n//               });\n//             }}\n//           >\n//             <fieldset disabled={loading} aria-busy={loading}>\n//               <h2>Sign Into Your Account</h2>\n//               <Error error={error} />\n//               <label htmlFor=\"email\">\n//                 Email\n//                 <input\n//                   type=\"email\"\n//                   name=\"email\"\n//                   placeholder=\"Email\"\n//                   value={inputs.email}\n//                   onChange={handleFormField}\n//                 />\n//               </label>\n//               <label htmlFor=\"password\">\n//                 Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"password\"\n//                   value={inputs.password}\n//                   onChange={handleFormField}\n//                 />\n//               </label>\n//               <button type=\"submit\">Sign In!</button>\n//             </fieldset>\n//           </Form>\n//         );\n//       }}\n//     </Mutation>\n//   );\n// };\n\n// export default Signin;\n"]},"metadata":{},"sourceType":"module"}