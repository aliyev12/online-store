{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Search.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\\n    items(\\n      where: {\\n        OR: [\\n          { title_contains: $searchTerm }\\n          { description_contains: $searchTerm }\\n        ]\\n      }\\n    ) {\\n      id\\n      image\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nvar SEARCH_ITEMS_QUERY = gql(_templateObject());\n\nvar AutoComplete = function AutoComplete() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var client = useApolloClient();\n\n  var _onChange = debounce(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, client) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Turn loading on\n              setLoading(true); // Manually query apollo client\n\n              _context.next = 3;\n              return client.query({\n                query: SEARCH_ITEMS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              });\n\n            case 3:\n              res = _context.sent;\n              setItems(res.data.items);\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), 350);\n\n  var routeToItem = function routeToItem(item) {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  }; // To get rid of the aria-label warning in console:\n\n\n  resetIdCounter();\n  return React.createElement(SearchStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Downshift, {\n    onChange: routeToItem,\n    itemToString: function itemToString(item) {\n      return item === null ? '' : item.title;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        getItemProps = _ref2.getItemProps,\n        isOpen = _ref2.isOpen,\n        inputValue = _ref2.inputValue,\n        highlightedIndex = _ref2.highlightedIndex;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"input\", _extends({\n      type: \"search\"\n    }, getInputProps({\n      type: 'search',\n      placeholder: 'Search For An Item',\n      id: 'search',\n      className: loading ? 'loading' : '',\n      onChange: function onChange(e) {\n        e.persist();\n\n        _onChange(e, client);\n      }\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), isOpen && React.createElement(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, items.map(function (item, index) {\n      return React.createElement(DropDownItem, _extends({}, getItemProps({\n        item: item\n      }), {\n        key: item.id,\n        highlighted: index === highlightedIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        width: \"50\",\n        src: item.image,\n        alt: item.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), item.title);\n    }), !items.length && !loading && React.createElement(DropDownItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Nothing Found For \", inputValue)));\n  }));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Search.js"],"names":["React","useState","Downshift","resetIdCounter","Router","ApolloConsumer","useApolloClient","gql","debounce","DropDown","DropDownItem","SearchStyles","SEARCH_ITEMS_QUERY","AutoComplete","items","setItems","loading","setLoading","client","onChange","e","query","variables","searchTerm","target","value","res","data","routeToItem","item","push","pathname","id","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","persist","map","index","image","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst AutoComplete = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const client = useApolloClient();\n\n  const onChange = debounce(async (e, client) => {\n    // Turn loading on\n    setLoading(true);\n    // Manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    setItems(res.data.items);\n    setLoading(false);\n  }, 350);\n\n  const routeToItem = item => {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  };\n\n  // To get rid of the aria-label warning in console:\n  resetIdCounter();\n  return (\n    <SearchStyles>\n      <Downshift\n        onChange={routeToItem}\n        itemToString={item => (item === null ? '' : item.title)}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          isOpen,\n          inputValue,\n          highlightedIndex\n        }) => (\n          <div>\n            <input\n              type=\"search\"\n              {...getInputProps({\n                type: 'search',\n                placeholder: 'Search For An Item',\n                id: 'search',\n                className: loading ? 'loading' : '',\n                onChange: e => {\n                  e.persist();\n                  onChange(e, client);\n                }\n              })}\n            />\n            {isOpen && (\n              <DropDown>\n                {items.map((item, index) => (\n                  <DropDownItem\n                    {...getItemProps({ item })}\n                    key={item.id}\n                    highlighted={index === highlightedIndex}\n                  >\n                    <img width=\"50\" src={item.image} alt={item.title} />\n                    {item.title}\n                  </DropDownItem>\n                ))}\n                {!items.length && !loading && (\n                  <DropDownItem>Nothing Found For {inputValue}</DropDownItem>\n                )}\n              </DropDown>\n            )}\n          </div>\n        )}\n      </Downshift>\n    </SearchStyles>\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}