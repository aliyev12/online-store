{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Reset.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RESET_MUTATION(\\n    $resetToken: String!\\n    $password: String!\\n    $confirmPassword: String!\\n  ) {\\n    requestPassword(\\n      resetToken: $resetToken\\n      password: $password\\n      confirmPassword: $confirmPassword\\n    ) {\\n      id\\n      email\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nvar RESET_MUTATION = gql(_templateObject());\n\nvar Reset = function Reset() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmPassword = _useState4[0],\n      setConfirmPassword = _useState4[1];\n\n  return React.createElement(Mutation, {\n    mutation: RESET_MUTATION,\n    variables: {\n      resetToken: resetToken,\n      password: password,\n      confirmPassword: confirmPassword\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, function (reset, _ref) {\n    var error = _ref.error,\n        loading = _ref.loading,\n        called = _ref.called;\n    return React.createElement(Form, {\n      method: \"post\",\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(e) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  e.preventDefault();\n                  _context.next = 3;\n                  return reset();\n\n                case 3:\n                  setPassword('');\n                  setConfirmPassword('');\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Reset Your Password\"), React.createElement(Error, {\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Password\", React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: function onChange(e) {\n        return setPassword(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"confirmPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Password\", React.createElement(\"input\", {\n      type: \"password\",\n      name: \"confirmPassword\",\n      value: confirmPassword,\n      onChange: function onChange(e) {\n        return setConfirmPassword(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Reset Your Password!\")));\n  });\n};\n\nReset.propTypes = {\n  resetToken: PropTypes.string.isRequired\n};\nexport default Reset;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Reset.js"],"names":["React","useState","PropTypes","Mutation","gql","Form","Error","RESET_MUTATION","Reset","password","setPassword","confirmPassword","setConfirmPassword","resetToken","reset","error","loading","called","e","preventDefault","target","value","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\n\nconst RESET_MUTATION = gql`\n  mutation RESET_MUTATION(\n    $resetToken: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    requestPassword(\n      resetToken: $resetToken\n      password: $password\n      confirmPassword: $confirmPassword\n    ) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nconst Reset = () => {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  return (\n    <Mutation\n      mutation={RESET_MUTATION}\n      variables={{\n        resetToken,\n        password,\n        confirmPassword\n      }}\n    >\n      {(reset, { error, loading, called }) => {\n        return (\n          <Form\n            method=\"post\"\n            onSubmit={async e => {\n              e.preventDefault();\n              await reset();\n              setPassword('');\n              setConfirmPassword('');\n            }}\n          >\n            <fieldset disabled={loading} aria-busy={loading}>\n              <h2>Reset Your Password</h2>\n              <Error error={error} />\n              <label htmlFor=\"password\">\n                Password\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </label>\n              <label htmlFor=\"confirmPassword\">\n                Password\n                <input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  value={confirmPassword}\n                  onChange={e => setConfirmPassword(e.target.value)}\n                />\n              </label>\n              <button type=\"submit\">Reset Your Password!</button>\n            </fieldset>\n          </Form>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nReset.propTypes = {\n  resetToken: PropTypes.string.isRequired,\n}\n\nexport default Reset;\n"]},"metadata":{},"sourceType":"module"}