{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\\n    deleteItem(id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { ALL_ITEMS_QUERY } from './Items';\nexport var DELETE_ITEM_MUTATION = gql(_templateObject());\n\nvar DeleteItem = function DeleteItem(_ref) {\n  var children = _ref.children,\n      id = _ref.id;\n\n  var update = function update(cache, payload) {\n    // Manually update the cache on the client so it matches the server\n    // 1. Read the cache for items we want\n    var data = cache.readQuery({\n      query: ALL_ITEMS_QUERY\n    }); // 2. Filter the deleted item out of the page\n\n    data.items = data.items.filter(function (item) {\n      return item.id !== payload.data.deleteItem.id;\n    }); // 3. Put the items back\n\n    cache.writeQuery({\n      query: ALL_ITEMS_QUERY,\n      data: data\n    });\n  };\n\n  var _useMutation = useMutation(DELETE_ITEM_MUTATION, {\n    update: update\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      deleteItem = _useMutation2[0],\n      error = _useMutation2[1].error;\n\n  return React.createElement(\"button\", {\n    onClick: function onClick() {\n      if (confirm('Are you sure you wanted to delete this?')) {\n        deleteItem({\n          variables: {\n            id: id\n          }\n        })[\"catch\"](function (err) {\n          alert(err.message);\n        });\n      }\n    }\n  }, children);\n};\n\nexport default DeleteItem; // import React from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import { ALL_ITEMS_QUERY } from './Items';\n// export const DELETE_ITEM_MUTATION = gql`\n//   mutation DELETE_ITEM_MUTATION($id: ID!) {\n//     deleteItem(id: $id) {\n//       id\n//     }\n//   }\n// `;\n// const DeleteItem = ({ children, id }) => {\n//   const update = (cache, payload) => {\n//     // Manually update the cache on the client so it matches the server\n//     // 1. Read the cache for items we want\n//     const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n//     // 2. Filter the deleted item out of the page\n//     data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n//     // 3. Put the items back\n//     cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n//   };\n//   return (\n//     <Mutation\n//       mutation={DELETE_ITEM_MUTATION}\n//       variables={{ id }}\n//       update={update}\n//     >\n//       {(deleteItem, { error }) => (\n//         <button\n//           onClick={() => {\n//             if (confirm('Are you sure you wanted to delete this?')) {\n//               deleteItem().catch(err => {\n//                 alert(err.message);\n//               });\n//             }\n//           }}\n//         >\n//           {children}\n//         </button>\n//       )}\n//     </Mutation>\n//   );\n// };\n// export default DeleteItem;","map":null,"metadata":{},"sourceType":"module"}