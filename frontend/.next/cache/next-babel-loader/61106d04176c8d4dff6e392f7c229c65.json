{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/TakeMyMoney.js\";\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst TakeMyMoney = ({\n  children\n}) => {\n  const [createOrder] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  const {\n    data: {\n      me\n    }\n  } = useUser();\n\n  const totalItems = cart => cart.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n\n  const onToken = async (res, create) => {\n    NProgress.start(); // Manually call the mutation once we have the stripe token\n\n    const order = await create({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.createOrder.id\n      }\n    });\n  };\n\n  return React.createElement(StripeCheckout, {\n    amount: calcTotalPrice(me.cart),\n    name: \"Great Fits\",\n    description: `Order of ${totalItems(me.cart)} item${totalItems(me.cart) === 1 ? '' : 's'}`,\n    image: idx(['cart', '0', 'item', 'image'], me) // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n    ,\n    stripeKey: \"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\",\n    currency: \"USD\",\n    email: me.email,\n    token: res => onToken(res, createOrder),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, children);\n};\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/TakeMyMoney.js"],"names":["React","StripeCheckout","useQuery","useMutation","Router","NProgress","gql","calcTotalPrice","Error","CURRENT_USER_QUERY","useUser","idx","CREATE_ORDER_MUTATION","TakeMyMoney","children","createOrder","refetchQueries","query","data","me","totalItems","cart","reduce","acc","cartItem","quantity","onToken","res","create","start","order","variables","token","id","catch","err","alert","message","push","pathname","email"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,MAAMC,qBAAqB,GAAGN,GAAI;;;;;;;;;;;;CAAlC;;AAcA,MAAMO,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,WAAD,IAAgBZ,WAAW,CAACS,qBAAD,EAAwB;AACvDI,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAER;AAAT,KAAD;AADuC,GAAxB,CAAjC;AAGA,QAAM;AACJS,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEFT,OAAO,EAFX;;AAIA,QAAMU,UAAU,GAAGC,IAAI,IACrBA,IAAI,CAACC,MAAL,CAAY,CAACC,GAAD,EAAMC,QAAN,KAAmBD,GAAG,GAAGC,QAAQ,CAACC,QAA9C,EAAwD,CAAxD,CADF;;AAGA,QAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,MAAZ,KAAuB;AACrCvB,IAAAA,SAAS,CAACwB,KAAV,GADqC,CAErC;;AACA,UAAMC,KAAK,GAAG,MAAMF,MAAM,CAAC;AACzBG,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAEL,GAAG,CAACM;AADF;AADc,KAAD,CAAN,CAIjBC,KAJiB,CAIXC,GAAG,IAAI;AACdC,MAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,KANmB,CAApB;AAOAjC,IAAAA,MAAM,CAACkC,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,QADA;AAEVtB,MAAAA,KAAK,EAAE;AAAEgB,QAAAA,EAAE,EAAEH,KAAK,CAACZ,IAAN,CAAWH,WAAX,CAAuBkB;AAA7B;AAFG,KAAZ;AAID,GAdD;;AAgBA,SACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAE1B,cAAc,CAACY,EAAE,CAACE,IAAJ,CADxB;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,WAAW,EAAG,YAAWD,UAAU,CAACD,EAAE,CAACE,IAAJ,CAAU,QAC3CD,UAAU,CAACD,EAAE,CAACE,IAAJ,CAAV,KAAwB,CAAxB,GAA4B,EAA5B,GAAiC,GAClC,EALH;AAME,IAAA,KAAK,EAAEV,GAAG,CAAC,CAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAsB,OAAtB,CAAD,EAAiCQ,EAAjC,CANZ,CAOE;AAPF;AAQE,IAAA,SAAS,EAAC,4CARZ;AASE,IAAA,QAAQ,EAAC,KATX;AAUE,IAAA,KAAK,EAAEA,EAAE,CAACqB,KAVZ;AAWE,IAAA,KAAK,EAAEb,GAAG,IAAID,OAAO,CAACC,GAAD,EAAMZ,WAAN,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGD,QAbH,CADF;AAiBD,CA5CD;;AA8CA,eAAeD,WAAf","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst TakeMyMoney = ({ children }) => {\n  const [createOrder] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{ query: CURRENT_USER_QUERY }]\n  });\n  const {\n    data: { me }\n  } = useUser();\n\n  const totalItems = cart =>\n    cart.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n\n  const onToken = async (res, create) => {\n    NProgress.start();\n    // Manually call the mutation once we have the stripe token\n    const order = await create({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id }\n    })\n  };\n\n  return (\n    <StripeCheckout\n      amount={calcTotalPrice(me.cart)}\n      name=\"Great Fits\"\n      description={`Order of ${totalItems(me.cart)} item${\n        totalItems(me.cart) === 1 ? '' : 's'\n      }`}\n      image={idx(['cart', '0', 'item', 'image'], me)}\n      // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n      stripeKey=\"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\"\n      currency=\"USD\"\n      email={me.email}\n      token={res => onToken(res, createOrder)}\n    >\n      {children}\n    </StripeCheckout>\n  );\n};\n\nexport default TakeMyMoney;\n"]},"metadata":{},"sourceType":"module"}