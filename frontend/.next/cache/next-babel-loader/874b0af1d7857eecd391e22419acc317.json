{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Search.js\";\nimport React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst AutoComplete = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const client = useApolloClient();\n  const onChange = debounce(async (e, client) => {\n    // Turn loading on\n    setLoading(true); // Manually query apollo client\n\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: {\n        searchTerm: e.target.value\n      }\n    });\n    setItems(res.data.items);\n    setLoading(false);\n  }, 350);\n\n  const routeToItem = item => {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  }; // To get rid of the aria-label warning in console:\n\n\n  resetIdCounter();\n  return React.createElement(SearchStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Downshift, {\n    onChange: routeToItem,\n    itemToString: item => item === null ? '' : item.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, ({\n    getInputProps,\n    getItemProps,\n    isOpen,\n    inputValue,\n    highlightedIndex\n  }) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"input\", _extends({\n    type: \"search\"\n  }, getInputProps({\n    type: 'search',\n    placeholder: 'Search For An Item',\n    id: 'search',\n    className: loading ? 'loading' : '',\n    onChange: e => {\n      e.persist();\n      onChange(e, client);\n    }\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), isOpen && React.createElement(DropDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, items.map((item, index) => React.createElement(DropDownItem, _extends({}, getItemProps({\n    item\n  }), {\n    key: item.id,\n    highlighted: index === highlightedIndex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    width: \"50\",\n    src: item.image,\n    alt: item.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), item.title)), !items.length && !loading && React.createElement(DropDownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Nothing Found For \", inputValue)))));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/Search.js"],"names":["React","useState","Downshift","resetIdCounter","Router","ApolloConsumer","useApolloClient","gql","debounce","DropDown","DropDownItem","SearchStyles","SEARCH_ITEMS_QUERY","AutoComplete","items","setItems","loading","setLoading","client","onChange","e","res","query","variables","searchTerm","target","value","data","routeToItem","item","push","pathname","id","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","persist","map","index","image","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst AutoComplete = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const client = useApolloClient();\n\n  const onChange = debounce(async (e, client) => {\n    // Turn loading on\n    setLoading(true);\n    // Manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value }\n    });\n    setItems(res.data.items);\n    setLoading(false);\n  }, 350);\n\n  const routeToItem = item => {\n    Router.push({\n      pathname: '/item',\n      query: {\n        id: item.id\n      }\n    });\n  };\n\n  // To get rid of the aria-label warning in console:\n  resetIdCounter();\n  return (\n    <SearchStyles>\n      <Downshift\n        onChange={routeToItem}\n        itemToString={item => (item === null ? '' : item.title)}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          isOpen,\n          inputValue,\n          highlightedIndex\n        }) => (\n          <div>\n            <input\n              type=\"search\"\n              {...getInputProps({\n                type: 'search',\n                placeholder: 'Search For An Item',\n                id: 'search',\n                className: loading ? 'loading' : '',\n                onChange: e => {\n                  e.persist();\n                  onChange(e, client);\n                }\n              })}\n            />\n            {isOpen && (\n              <DropDown>\n                {items.map((item, index) => (\n                  <DropDownItem\n                    {...getItemProps({ item })}\n                    key={item.id}\n                    highlighted={index === highlightedIndex}\n                  >\n                    <img width=\"50\" src={item.image} alt={item.title} />\n                    {item.title}\n                  </DropDownItem>\n                ))}\n                {!items.length && !loading && (\n                  <DropDownItem>Nothing Found For {inputValue}</DropDownItem>\n                )}\n              </DropDown>\n            )}\n          </div>\n        )}\n      </Downshift>\n    </SearchStyles>\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}