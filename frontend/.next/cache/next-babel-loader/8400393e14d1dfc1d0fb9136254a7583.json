{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder($token: String!) {\\n    createOrder(token: $token) {\\n      id\\n      charge\\n      total\\n      items {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport { gql } from 'apollo-boost';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from '../lib/queries';\nimport useUser from '../hooks/useUser';\nimport { idx } from '../lib/helpers';\nvar CREATE_ORDER_MUTATION = gql(_templateObject());\n\nvar TakeMyMoney = function TakeMyMoney(_ref) {\n  var children = _ref.children;\n\n  var _useMutation = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createOrder = _useMutation2[0];\n\n  var _useUser = useUser(),\n      me = _useUser.data.me;\n\n  var totalItems = function totalItems(cart) {\n    return cart.reduce(function (acc, cartItem) {\n      return acc + cartItem.quantity;\n    }, 0);\n  };\n\n  var onToken =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(res, create) {\n      var order;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              NProgress.start(); // Manually call the mutation once we have the stripe token\n\n              _context.next = 3;\n              return create({\n                variables: {\n                  token: res.id\n                }\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              });\n\n            case 3:\n              order = _context.sent;\n              Router.push({\n                pathname: '/order',\n                query: {\n                  id: order.data.createOrder.id\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onToken(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(StripeCheckout, {\n    amount: calcTotalPrice(me.cart),\n    name: \"Great Fits\",\n    description: \"Order of \".concat(totalItems(me.cart), \" item\").concat(totalItems(me.cart) === 1 ? '' : 's'),\n    image: idx(['cart', '0', 'item', 'image'], me) // image={me.cart && me.cart.length && me.cart[0].item && me.cart[0].item.image ? me.cart[0].item.image : ''}\n    ,\n    stripeKey: \"pk_test_hhz29HQbQz30mWS5QF59kLKN00Nv74hEX0\",\n    currency: \"USD\",\n    email: me.email,\n    token: function token(res) {\n      return onToken(res, createOrder);\n    }\n  }, children);\n};\n\nexport default TakeMyMoney;","map":null,"metadata":{},"sourceType":"module"}