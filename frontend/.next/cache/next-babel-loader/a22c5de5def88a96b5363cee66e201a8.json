{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/DeleteItem.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\\n    deleteItem(id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\nexport var DELETE_ITEM_MUTATION = gql(_templateObject());\n\nvar DeleteItem = function DeleteItem(_ref) {\n  var children = _ref.children,\n      id = _ref.id;\n\n  var update = function update(cache, payload) {\n    // Manually update the cache on the client so it matches the server\n    // 1. Read the cache for items we want\n    var data = cache.readQuery({\n      query: ALL_ITEMS_QUERY\n    }); // 2. Filter the deleted item out of the page\n\n    data.items = data.items.filter(function (item) {\n      return item.id !== payload.data.deleteItem.id;\n    }); // 3. Put the items back\n\n    cache.writeQuery({\n      query: ALL_ITEMS_QUERY,\n      data: data\n    });\n  };\n\n  return React.createElement(Mutation, {\n    mutation: DELETE_ITEM_MUTATION,\n    variables: {\n      id: id\n    },\n    update: update,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, function (deleteItem, _ref2) {\n    var error = _ref2.error;\n    return React.createElement(\"button\", {\n      onClick: function onClick() {\n        if (confirm('Are you sure you wanted to delete this?')) {\n          deleteItem();\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, children);\n  });\n};\n\nexport default DeleteItem;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/DeleteItem.js"],"names":["React","Mutation","gql","ALL_ITEMS_QUERY","DELETE_ITEM_MUTATION","DeleteItem","children","id","update","cache","payload","data","readQuery","query","items","filter","item","deleteItem","writeQuery","error","confirm"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,OAAO,IAAMC,oBAAoB,GAAGF,GAAH,mBAA1B;;AAQP,IAAMG,UAAU,GAAG,SAAbA,UAAa,OAAsB;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACvC,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACjC;AACA;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,MAAAA,KAAK,EAAEV;AAAT,KAAhB,CAAb,CAHiC,CAIjC;;AACAQ,IAAAA,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACT,EAAL,KAAYG,OAAO,CAACC,IAAR,CAAaM,UAAb,CAAwBV,EAAxC;AAAA,KAAtB,CAAb,CALiC,CAMjC;;AACAE,IAAAA,KAAK,CAACS,UAAN,CAAiB;AAAEL,MAAAA,KAAK,EAAEV,eAAT;AAA0BQ,MAAAA,IAAI,EAAJA;AAA1B,KAAjB;AACD,GARD;;AAUA,SACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEP,oBADZ;AAEE,IAAA,SAAS,EAAE;AAAEG,MAAAA,EAAE,EAAFA;AAAF,KAFb;AAGE,IAAA,MAAM,EAAEC,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,UAACS,UAAD;AAAA,QAAeE,KAAf,SAAeA,KAAf;AAAA,WACC;AACE,MAAA,OAAO,EAAE,mBAAM;AACb,YAAIC,OAAO,CAAC,yCAAD,CAAX,EAAwD;AACtDH,UAAAA,UAAU;AACX;AACF,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGX,QAPH,CADD;AAAA,GALH,CADF;AAmBD,CA9BD;;AAgCA,eAAeD,UAAf","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\n\nexport const DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\n\nconst DeleteItem = ({ children, id }) => {\n  const update = (cache, payload) => {\n    // Manually update the cache on the client so it matches the server\n    // 1. Read the cache for items we want\n    const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n    // 2. Filter the deleted item out of the page\n    data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n    // 3. Put the items back\n    cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n  };\n\n  return (\n    <Mutation\n      mutation={DELETE_ITEM_MUTATION}\n      variables={{ id }}\n      update={update}\n    >\n      {(deleteItem, { error }) => (\n        <button\n          onClick={() => {\n            if (confirm('Are you sure you wanted to delete this?')) {\n              deleteItem();\n            }\n          }}\n        >\n          {children}\n        </button>\n      )}\n    </Mutation>\n  );\n};\n\nexport default DeleteItem;\n"]},"metadata":{},"sourceType":"module"}