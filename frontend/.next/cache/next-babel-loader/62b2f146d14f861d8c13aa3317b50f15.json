{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/CreateItem.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_ITEM_MUTATION(\\n    $title: String!\\n    $description: String!\\n    $price: Int!\\n    $image: String\\n    $largeImage: String\\n  ) {\\n    createItem(\\n      title: $title\\n      description: $description\\n      price: $price\\n      image: $image\\n      largeImage: $largeImage\\n    ) {\\n      id\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport User from './User';\nexport var CREATE_ITEM_MUTATION = gql(_templateObject());\n\nvar CreateItem = function CreateItem() {\n  var _useState = useState('Item Title'),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState('Item Description'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      largeImage = _useState8[0],\n      setLargeImage = _useState8[1];\n\n  var _useState9 = useState(9998),\n      _useState10 = _slicedToArray(_useState9, 2),\n      price = _useState10[0],\n      setPrice = _useState10[1];\n\n  var _useMutation = useMutation(CREATE_ITEM_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createItem = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  var uploadFile =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var files, data, res, file;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              files = e.target.files;\n              data = new FormData();\n              data.append('file', files[0]);\n              data.append('upload_preset', 'greatfits'); // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n\n              _context.next = 6;\n              return fetch(\"https://api.cloudinary.com/v1_1/greatfits/image/upload\", {\n                method: 'POST',\n                body: data\n              });\n\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.json();\n\n            case 9:\n              file = _context.sent;\n              setImage(file.secure_url);\n              setLargeImage(file.eager[0].secure_url);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function uploadFile(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Form, {\n    onSubmit:\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Stop the form from submitting\n                e.preventDefault(); // Call the mutation\n\n                _context2.next = 3;\n                return createItem({\n                  variables: {\n                    title: title,\n                    description: description,\n                    image: image,\n                    largeImage: largeImage,\n                    price: price\n                  }\n                });\n\n              case 3:\n                res = _context2.sent;\n                // Change them to the single item page\n                Router.push({\n                  pathname: '/item',\n                  query: {\n                    id: res.data.createItem.id\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    method: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Image\", React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    name: \"file\",\n    placeholder: \"Upload an image\",\n    required: true,\n    onChange: uploadFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), image && React.createElement(\"img\", {\n    src: image,\n    alt: \"Upload Preview\",\n    width: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Title\", React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Price\", React.createElement(\"input\", {\n    type: \"number\",\n    id: \"price\",\n    name: \"price\",\n    placeholder: \"Price\",\n    required: true,\n    value: price,\n    onChange: function onChange(e) {\n      return setPrice(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Description\", React.createElement(\"textarea\", {\n    id: \"description\",\n    name: \"description\",\n    placeholder: \"Enter a Description\",\n    required: true,\n    value: description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nexport default CreateItem; // import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// import User from './User';\n// export const CREATE_ITEM_MUTATION = gql`\n//   mutation CREATE_ITEM_MUTATION(\n//     $title: String!\n//     $description: String!\n//     $price: Int!\n//     $image: String\n//     $largeImage: String\n//   ) {\n//     createItem(\n//       title: $title\n//       description: $description\n//       price: $price\n//       image: $image\n//       largeImage: $largeImage\n//     ) {\n//       id\n//       title\n//     }\n//   }\n// `;\n// const CreateItem = (props) => {\n//   const [title, setTitle] = useState('Item Title');\n//   const [description, setDescription] = useState('Item Description');\n//   const [image, setImage] = useState('');\n//   const [largeImage, setLargeImage] = useState('');\n//   const [price, setPrice] = useState(9998);\n//   const uploadFile = async e => {\n//     const files = e.target.files;\n//     const data = new FormData();\n//     data.append('file', files[0]);\n//     data.append('upload_preset', 'greatfits');\n//     // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n//     const res = await fetch(`https://api.cloudinary.com/v1_1/greatfits/image/upload`, {\n//       method: 'POST',\n//       body: data\n//     });\n//     const file = await res.json();\n//     setImage(file.secure_url);\n//     setLargeImage(file.eager[0].secure_url);\n//   }\n//   return (\n//     <Mutation\n//       mutation={CREATE_ITEM_MUTATION}\n//       variables={{\n//         title,\n//         description,\n//         image,\n//         largeImage,\n//         price\n//       }}\n//     >\n//       {(createItem, { loading, error }) => (\n//         <Form\n//           onSubmit={ async e => {\n//             // Stop the form from submitting\n//             e.preventDefault();\n//             // Call the mutation\n//             const res = await createItem();\n//             // Change them to the single item page\n//             Router.push({\n//                 pathname: '/item',\n//                 query: { id: res.data.createItem.id }\n//             });\n//           }}\n//           method=\"post\"\n//         >\n//         <Error error={error}/>\n//           <fieldset disabled={loading} aria-busy={loading}>\n//             <label htmlFor=\"file\">\n//               Image\n//               <input\n//                 type=\"file\"\n//                 id=\"file\"\n//                 name=\"file\"\n//                 placeholder=\"Upload an image\"\n//                 required\n//                 onChange={uploadFile}\n//               />\n//               {image && <img src={image} alt=\"Upload Preview\" width=\"200\"/>}\n//             </label>\n//             <label htmlFor=\"title\">\n//               Title\n//               <input\n//                 type=\"text\"\n//                 id=\"title\"\n//                 name=\"title\"\n//                 placeholder=\"Title\"\n//                 required\n//                 value={title}\n//                 onChange={e => setTitle(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"price\">\n//               Price\n//               <input\n//                 type=\"number\"\n//                 id=\"price\"\n//                 name=\"price\"\n//                 placeholder=\"Price\"\n//                 required\n//                 value={price}\n//                 onChange={e => setPrice(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"title\">\n//               Description\n//               <textarea\n//                 id=\"description\"\n//                 name=\"description\"\n//                 placeholder=\"Enter a Description\"\n//                 required\n//                 value={description}\n//                 onChange={e => setDescription(e.target.value)}\n//               />\n//             </label>\n//             <button type=\"submit\">Submit</button>\n//           </fieldset>\n//         </Form>\n//       )}\n//     </Mutation>\n//   );\n// };\n// export default CreateItem;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/CreateItem.js"],"names":["React","useState","useMutation","gql","Router","Form","formatMoney","Error","User","CREATE_ITEM_MUTATION","CreateItem","title","setTitle","description","setDescription","image","setImage","largeImage","setLargeImage","price","setPrice","createItem","loading","error","uploadFile","e","files","target","data","FormData","append","fetch","method","body","res","json","file","secure_url","eager","preventDefault","variables","push","pathname","query","id","value"],"mappings":"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":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport User from './User';\n\nexport const CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst CreateItem = () => {\n  const [title, setTitle] = useState('Item Title');\n  const [description, setDescription] = useState('Item Description');\n  const [image, setImage] = useState('');\n  const [largeImage, setLargeImage] = useState('');\n  const [price, setPrice] = useState(9998);\n  const [createItem, { loading, error }] = useMutation(CREATE_ITEM_MUTATION);\n\n  const uploadFile = async e => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'greatfits');\n    // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n    const res = await fetch(\n      `https://api.cloudinary.com/v1_1/greatfits/image/upload`,\n      {\n        method: 'POST',\n        body: data\n      }\n    );\n    const file = await res.json();\n    setImage(file.secure_url);\n    setLargeImage(file.eager[0].secure_url);\n  };\n\n  return (\n    <Form\n      onSubmit={async e => {\n        // Stop the form from submitting\n        e.preventDefault();\n        // Call the mutation\n        const res = await createItem({\n          variables: {\n            title,\n            description,\n            image,\n            largeImage,\n            price\n          }\n        });\n        // Change them to the single item page\n        Router.push({\n          pathname: '/item',\n          query: { id: res.data.createItem.id }\n        });\n      }}\n      method=\"post\"\n    >\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"file\">\n          Image\n          <input\n            type=\"file\"\n            id=\"file\"\n            name=\"file\"\n            placeholder=\"Upload an image\"\n            required\n            onChange={uploadFile}\n          />\n          {image && <img src={image} alt=\"Upload Preview\" width=\"200\" />}\n        </label>\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"Price\"\n            required\n            value={price}\n            onChange={e => setPrice(e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"title\">\n          Description\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Enter a Description\"\n            required\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default CreateItem;\n\n// import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// import User from './User';\n\n// export const CREATE_ITEM_MUTATION = gql`\n//   mutation CREATE_ITEM_MUTATION(\n//     $title: String!\n//     $description: String!\n//     $price: Int!\n//     $image: String\n//     $largeImage: String\n//   ) {\n//     createItem(\n//       title: $title\n//       description: $description\n//       price: $price\n//       image: $image\n//       largeImage: $largeImage\n//     ) {\n//       id\n//       title\n//     }\n//   }\n// `;\n\n// const CreateItem = (props) => {\n//   const [title, setTitle] = useState('Item Title');\n//   const [description, setDescription] = useState('Item Description');\n//   const [image, setImage] = useState('');\n//   const [largeImage, setLargeImage] = useState('');\n//   const [price, setPrice] = useState(9998);\n\n//   const uploadFile = async e => {\n//     const files = e.target.files;\n//     const data = new FormData();\n//     data.append('file', files[0]);\n//     data.append('upload_preset', 'greatfits');\n//     // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n//     const res = await fetch(`https://api.cloudinary.com/v1_1/greatfits/image/upload`, {\n//       method: 'POST',\n//       body: data\n//     });\n//     const file = await res.json();\n//     setImage(file.secure_url);\n//     setLargeImage(file.eager[0].secure_url);\n//   }\n\n//   return (\n//     <Mutation\n//       mutation={CREATE_ITEM_MUTATION}\n//       variables={{\n//         title,\n//         description,\n//         image,\n//         largeImage,\n//         price\n//       }}\n//     >\n//       {(createItem, { loading, error }) => (\n//         <Form\n//           onSubmit={ async e => {\n//             // Stop the form from submitting\n//             e.preventDefault();\n//             // Call the mutation\n//             const res = await createItem();\n//             // Change them to the single item page\n//             Router.push({\n//                 pathname: '/item',\n//                 query: { id: res.data.createItem.id }\n//             });\n//           }}\n//           method=\"post\"\n//         >\n//         <Error error={error}/>\n//           <fieldset disabled={loading} aria-busy={loading}>\n//             <label htmlFor=\"file\">\n//               Image\n//               <input\n//                 type=\"file\"\n//                 id=\"file\"\n//                 name=\"file\"\n//                 placeholder=\"Upload an image\"\n//                 required\n//                 onChange={uploadFile}\n//               />\n//               {image && <img src={image} alt=\"Upload Preview\" width=\"200\"/>}\n//             </label>\n//             <label htmlFor=\"title\">\n//               Title\n//               <input\n//                 type=\"text\"\n//                 id=\"title\"\n//                 name=\"title\"\n//                 placeholder=\"Title\"\n//                 required\n//                 value={title}\n//                 onChange={e => setTitle(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"price\">\n//               Price\n//               <input\n//                 type=\"number\"\n//                 id=\"price\"\n//                 name=\"price\"\n//                 placeholder=\"Price\"\n//                 required\n//                 value={price}\n//                 onChange={e => setPrice(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"title\">\n//               Description\n//               <textarea\n//                 id=\"description\"\n//                 name=\"description\"\n//                 placeholder=\"Enter a Description\"\n//                 required\n//                 value={description}\n//                 onChange={e => setDescription(e.target.value)}\n//               />\n//             </label>\n//             <button type=\"submit\">Submit</button>\n//           </fieldset>\n//         </Form>\n//       )}\n//     </Mutation>\n//   );\n// };\n\n// export default CreateItem;\n"]},"metadata":{},"sourceType":"module"}