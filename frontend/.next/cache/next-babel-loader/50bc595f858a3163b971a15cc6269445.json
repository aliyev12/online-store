{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RESET_MUTATION(\\n    $resetToken: String!\\n    $password: String!\\n    $confirmPassword: String!\\n  ) {\\n    resetPassword(\\n      resetToken: $resetToken\\n      password: $password\\n      confirmPassword: $confirmPassword\\n    ) {\\n      id\\n      email\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport CURRENT_USER_QUERY from './User';\nvar RESET_MUTATION = gql(_templateObject());\n\nvar Reset = function Reset(_ref) {\n  var resetToken = _ref.resetToken;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmPassword = _useState4[0],\n      setConfirmPassword = _useState4[1];\n\n  var _useMutation = useMutation(RESET_MUTATION, {\n    variables: {\n      resetToken: resetToken,\n      password: password,\n      confirmPassword: confirmPassword\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      resetPassword = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error,\n      called = _useMutation2$.called;\n\n  return React.createElement(Form, {\n    method: \"post\",\n    onSubmit:\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                resetPassword();\n                setPassword('');\n                setConfirmPassword('');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  }, React.createElement(\"fieldset\", null, React.createElement(\"h2\", null, \"Reset Your Password\"), React.createElement(Error, {\n    error: error\n  }), React.createElement(\"label\", {\n    htmlFor: \"password\"\n  }, \"Password\", React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    }\n  })), React.createElement(\"label\", {\n    htmlFor: \"confirmPassword\"\n  }, \"Confirm Password\", React.createElement(\"input\", {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: function onChange(e) {\n      return setConfirmPassword(e.target.value);\n    }\n  })), React.createElement(\"button\", {\n    type: \"submit\"\n  }, \"Reset Your Password!\")));\n};\n\nexport default Reset; // import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Form from './styles/Form';\n// import Error from './ErrorMessage';\n// import CURRENT_USER_QUERY from './User';\n// const RESET_MUTATION = gql`\n//   mutation RESET_MUTATION(\n//     $resetToken: String!\n//     $password: String!\n//     $confirmPassword: String!\n//   ) {\n//     resetPassword(\n//       resetToken: $resetToken\n//       password: $password\n//       confirmPassword: $confirmPassword\n//     ) {\n//       id\n//       email\n//       name\n//     }\n//   }\n// `;\n// const Reset = ({ resetToken }) => {\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   return (\n//     <Mutation\n//       mutation={RESET_MUTATION}\n//       variables={{\n//         resetToken,\n//         password,\n//         confirmPassword\n//       }}\n//       refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n//     >\n//       {(resetPassword, { loading, error, called }) => {\n//         return (\n//           <Form\n//             method=\"post\"\n//             onSubmit={async e => {\n//               e.preventDefault();\n//               resetPassword();\n//               setPassword('');\n//               setConfirmPassword('');\n//               console.log('====== here....');\n//             }}\n//           >\n//             {/* <fieldset disabled={loading} aria-busy={loading}> */}\n//             <fieldset >\n//               <h2>Reset Your Password</h2>\n//               <Error error={error} />\n//               <label htmlFor=\"password\">\n//                 Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"password\"\n//                   value={password}\n//                   onChange={e => setPassword(e.target.value)}\n//                 />\n//               </label>\n//               <label htmlFor=\"confirmPassword\">\n//                 Confirm Password\n//                 <input\n//                   type=\"password\"\n//                   name=\"confirmPassword\"\n//                   value={confirmPassword}\n//                   onChange={e => setConfirmPassword(e.target.value)}\n//                 />\n//               </label>\n//               <button type=\"submit\">Reset Your Password!</button>\n//             </fieldset>\n//           </Form>\n//         );\n//       }}\n//     </Mutation>\n//   );\n// };\n// Reset.propTypes = {\n//   resetToken: PropTypes.string.isRequired\n// };\n// export default Reset;","map":null,"metadata":{},"sourceType":"module"}