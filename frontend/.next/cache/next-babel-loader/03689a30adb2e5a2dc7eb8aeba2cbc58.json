{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/CreateItem.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport User from './User';\nexport const CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst CreateItem = () => {\n  const [title, setTitle] = useState('Item Title');\n  const [description, setDescription] = useState('Item Description');\n  const [image, setImage] = useState('');\n  const [largeImage, setLargeImage] = useState('');\n  const [price, setPrice] = useState(9998);\n  const [createItem, {\n    loading,\n    error\n  }] = useMutation(CREATE_ITEM_MUTATION);\n\n  const uploadFile = async e => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'greatfits'); // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n\n    const res = await fetch(`https://api.cloudinary.com/v1_1/greatfits/image/upload`, {\n      method: 'POST',\n      body: data\n    });\n    const file = await res.json();\n    setImage(file.secure_url);\n    setLargeImage(file.eager[0].secure_url);\n  };\n\n  return React.createElement(Form, {\n    \"data-test\": \"form\",\n    onSubmit: async e => {\n      // Stop the form from submitting\n      e.preventDefault(); // Call the mutation\n\n      const res = await createItem({\n        variables: {\n          title,\n          description,\n          image,\n          largeImage,\n          price\n        }\n      }); // Change them to the single item page\n\n      Router.push({\n        pathname: '/item',\n        query: {\n          id: res.data.createItem.id\n        }\n      });\n    },\n    method: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Image\", React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    name: \"file\",\n    placeholder: \"Upload an image\",\n    required: true,\n    onChange: uploadFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), image && React.createElement(\"img\", {\n    src: image,\n    alt: \"Upload Preview\",\n    width: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Title\", React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    required: true,\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Price\", React.createElement(\"input\", {\n    type: \"number\",\n    id: \"price\",\n    name: \"price\",\n    placeholder: \"Price\",\n    required: true,\n    value: price,\n    onChange: e => setPrice(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Description\", React.createElement(\"textarea\", {\n    id: \"description\",\n    name: \"description\",\n    placeholder: \"Enter a Description\",\n    required: true,\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nexport default CreateItem; // import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// import User from './User';\n// export const CREATE_ITEM_MUTATION = gql`\n//   mutation CREATE_ITEM_MUTATION(\n//     $title: String!\n//     $description: String!\n//     $price: Int!\n//     $image: String\n//     $largeImage: String\n//   ) {\n//     createItem(\n//       title: $title\n//       description: $description\n//       price: $price\n//       image: $image\n//       largeImage: $largeImage\n//     ) {\n//       id\n//       title\n//     }\n//   }\n// `;\n// const CreateItem = (props) => {\n//   const [title, setTitle] = useState('Item Title');\n//   const [description, setDescription] = useState('Item Description');\n//   const [image, setImage] = useState('');\n//   const [largeImage, setLargeImage] = useState('');\n//   const [price, setPrice] = useState(9998);\n//   const uploadFile = async e => {\n//     const files = e.target.files;\n//     const data = new FormData();\n//     data.append('file', files[0]);\n//     data.append('upload_preset', 'greatfits');\n//     // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n//     const res = await fetch(`https://api.cloudinary.com/v1_1/greatfits/image/upload`, {\n//       method: 'POST',\n//       body: data\n//     });\n//     const file = await res.json();\n//     setImage(file.secure_url);\n//     setLargeImage(file.eager[0].secure_url);\n//   }\n//   return (\n//     <Mutation\n//       mutation={CREATE_ITEM_MUTATION}\n//       variables={{\n//         title,\n//         description,\n//         image,\n//         largeImage,\n//         price\n//       }}\n//     >\n//       {(createItem, { loading, error }) => (\n//         <Form\n//           onSubmit={ async e => {\n//             // Stop the form from submitting\n//             e.preventDefault();\n//             // Call the mutation\n//             const res = await createItem();\n//             // Change them to the single item page\n//             Router.push({\n//                 pathname: '/item',\n//                 query: { id: res.data.createItem.id }\n//             });\n//           }}\n//           method=\"post\"\n//         >\n//         <Error error={error}/>\n//           <fieldset disabled={loading} aria-busy={loading}>\n//             <label htmlFor=\"file\">\n//               Image\n//               <input\n//                 type=\"file\"\n//                 id=\"file\"\n//                 name=\"file\"\n//                 placeholder=\"Upload an image\"\n//                 required\n//                 onChange={uploadFile}\n//               />\n//               {image && <img src={image} alt=\"Upload Preview\" width=\"200\"/>}\n//             </label>\n//             <label htmlFor=\"title\">\n//               Title\n//               <input\n//                 type=\"text\"\n//                 id=\"title\"\n//                 name=\"title\"\n//                 placeholder=\"Title\"\n//                 required\n//                 value={title}\n//                 onChange={e => setTitle(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"price\">\n//               Price\n//               <input\n//                 type=\"number\"\n//                 id=\"price\"\n//                 name=\"price\"\n//                 placeholder=\"Price\"\n//                 required\n//                 value={price}\n//                 onChange={e => setPrice(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"title\">\n//               Description\n//               <textarea\n//                 id=\"description\"\n//                 name=\"description\"\n//                 placeholder=\"Enter a Description\"\n//                 required\n//                 value={description}\n//                 onChange={e => setDescription(e.target.value)}\n//               />\n//             </label>\n//             <button type=\"submit\">Submit</button>\n//           </fieldset>\n//         </Form>\n//       )}\n//     </Mutation>\n//   );\n// };\n// export default CreateItem;","map":{"version":3,"sources":["/Users/abdulaliyev/web-projects/wes-bos/online-store/frontend/components/CreateItem.js"],"names":["React","useState","useMutation","gql","Router","Form","formatMoney","Error","User","CREATE_ITEM_MUTATION","CreateItem","title","setTitle","description","setDescription","image","setImage","largeImage","setLargeImage","price","setPrice","createItem","loading","error","uploadFile","e","files","target","data","FormData","append","res","fetch","method","body","file","json","secure_url","eager","preventDefault","variables","push","pathname","query","id","value"],"mappings":"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":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport User from './User';\n\nexport const CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n      title\n    }\n  }\n`;\n\nconst CreateItem = () => {\n  const [title, setTitle] = useState('Item Title');\n  const [description, setDescription] = useState('Item Description');\n  const [image, setImage] = useState('');\n  const [largeImage, setLargeImage] = useState('');\n  const [price, setPrice] = useState(9998);\n  const [createItem, { loading, error }] = useMutation(CREATE_ITEM_MUTATION);\n\n  const uploadFile = async e => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'greatfits');\n    // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n    const res = await fetch(\n      `https://api.cloudinary.com/v1_1/greatfits/image/upload`,\n      {\n        method: 'POST',\n        body: data\n      }\n    );\n    const file = await res.json();\n    setImage(file.secure_url);\n    setLargeImage(file.eager[0].secure_url);\n  };\n\n  return (\n    <Form\n    data-test=\"form\"\n      onSubmit={async e => {\n        // Stop the form from submitting\n        e.preventDefault();\n        // Call the mutation\n        const res = await createItem({\n          variables: {\n            title,\n            description,\n            image,\n            largeImage,\n            price\n          }\n        });\n        // Change them to the single item page\n        Router.push({\n          pathname: '/item',\n          query: { id: res.data.createItem.id }\n        });\n      }}\n      method=\"post\"\n    >\n      <Error error={error} />\n      <fieldset disabled={loading} aria-busy={loading}>\n        <label htmlFor=\"file\">\n          Image\n          <input\n            type=\"file\"\n            id=\"file\"\n            name=\"file\"\n            placeholder=\"Upload an image\"\n            required\n            onChange={uploadFile}\n          />\n          {image && <img src={image} alt=\"Upload Preview\" width=\"200\" />}\n        </label>\n        <label htmlFor=\"title\">\n          Title\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"price\">\n          Price\n          <input\n            type=\"number\"\n            id=\"price\"\n            name=\"price\"\n            placeholder=\"Price\"\n            required\n            value={price}\n            onChange={e => setPrice(e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"title\">\n          Description\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            placeholder=\"Enter a Description\"\n            required\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </fieldset>\n    </Form>\n  );\n};\n\nexport default CreateItem;\n\n// import React, { useState } from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import Router from 'next/router';\n// import Form from './styles/Form';\n// import formatMoney from '../lib/formatMoney';\n// import Error from './ErrorMessage';\n// import User from './User';\n\n// export const CREATE_ITEM_MUTATION = gql`\n//   mutation CREATE_ITEM_MUTATION(\n//     $title: String!\n//     $description: String!\n//     $price: Int!\n//     $image: String\n//     $largeImage: String\n//   ) {\n//     createItem(\n//       title: $title\n//       description: $description\n//       price: $price\n//       image: $image\n//       largeImage: $largeImage\n//     ) {\n//       id\n//       title\n//     }\n//   }\n// `;\n\n// const CreateItem = (props) => {\n//   const [title, setTitle] = useState('Item Title');\n//   const [description, setDescription] = useState('Item Description');\n//   const [image, setImage] = useState('');\n//   const [largeImage, setLargeImage] = useState('');\n//   const [price, setPrice] = useState(9998);\n\n//   const uploadFile = async e => {\n//     const files = e.target.files;\n//     const data = new FormData();\n//     data.append('file', files[0]);\n//     data.append('upload_preset', 'greatfits');\n//     // https://res.cloudinary.com/greatfits/image/upload/v1564874789/sample.jpg\n//     const res = await fetch(`https://api.cloudinary.com/v1_1/greatfits/image/upload`, {\n//       method: 'POST',\n//       body: data\n//     });\n//     const file = await res.json();\n//     setImage(file.secure_url);\n//     setLargeImage(file.eager[0].secure_url);\n//   }\n\n//   return (\n//     <Mutation\n//       mutation={CREATE_ITEM_MUTATION}\n//       variables={{\n//         title,\n//         description,\n//         image,\n//         largeImage,\n//         price\n//       }}\n//     >\n//       {(createItem, { loading, error }) => (\n//         <Form\n//           onSubmit={ async e => {\n//             // Stop the form from submitting\n//             e.preventDefault();\n//             // Call the mutation\n//             const res = await createItem();\n//             // Change them to the single item page\n//             Router.push({\n//                 pathname: '/item',\n//                 query: { id: res.data.createItem.id }\n//             });\n//           }}\n//           method=\"post\"\n//         >\n//         <Error error={error}/>\n//           <fieldset disabled={loading} aria-busy={loading}>\n//             <label htmlFor=\"file\">\n//               Image\n//               <input\n//                 type=\"file\"\n//                 id=\"file\"\n//                 name=\"file\"\n//                 placeholder=\"Upload an image\"\n//                 required\n//                 onChange={uploadFile}\n//               />\n//               {image && <img src={image} alt=\"Upload Preview\" width=\"200\"/>}\n//             </label>\n//             <label htmlFor=\"title\">\n//               Title\n//               <input\n//                 type=\"text\"\n//                 id=\"title\"\n//                 name=\"title\"\n//                 placeholder=\"Title\"\n//                 required\n//                 value={title}\n//                 onChange={e => setTitle(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"price\">\n//               Price\n//               <input\n//                 type=\"number\"\n//                 id=\"price\"\n//                 name=\"price\"\n//                 placeholder=\"Price\"\n//                 required\n//                 value={price}\n//                 onChange={e => setPrice(e.target.value)}\n//               />\n//             </label>\n//             <label htmlFor=\"title\">\n//               Description\n//               <textarea\n//                 id=\"description\"\n//                 name=\"description\"\n//                 placeholder=\"Enter a Description\"\n//                 required\n//                 value={description}\n//                 onChange={e => setDescription(e.target.value)}\n//               />\n//             </label>\n//             <button type=\"submit\">Submit</button>\n//           </fieldset>\n//         </Form>\n//       )}\n//     </Mutation>\n//   );\n// };\n\n// export default CreateItem;\n"]},"metadata":{},"sourceType":"module"}