{"ast":null,"code":"var _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/DeleteItem.js\";\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { ALL_ITEMS_QUERY } from './Items';\nexport const DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\n\nconst DeleteItem = ({\n  children,\n  id\n}) => {\n  const update = (cache, payload) => {\n    // Manually update the cache on the client so it matches the server\n    // 1. Read the cache for items we want\n    const data = cache.readQuery({\n      query: ALL_ITEMS_QUERY\n    }); // 2. Filter the deleted item out of the page\n\n    data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id); // 3. Put the items back\n\n    cache.writeQuery({\n      query: ALL_ITEMS_QUERY,\n      data\n    });\n  };\n\n  const [deleteItem, {\n    error\n  }] = useMutation(DELETE_ITEM_MUTATION, {\n    update\n  });\n  return React.createElement(\"button\", {\n    onClick: () => {\n      if (confirm('Are you sure you wanted to delete this?')) {\n        deleteItem({\n          variables: {\n            id\n          }\n        }).catch(err => {\n          alert(err.message);\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, children);\n};\n\nexport default DeleteItem; // import React from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import { ALL_ITEMS_QUERY } from './Items';\n// export const DELETE_ITEM_MUTATION = gql`\n//   mutation DELETE_ITEM_MUTATION($id: ID!) {\n//     deleteItem(id: $id) {\n//       id\n//     }\n//   }\n// `;\n// const DeleteItem = ({ children, id }) => {\n//   const update = (cache, payload) => {\n//     // Manually update the cache on the client so it matches the server\n//     // 1. Read the cache for items we want\n//     const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n//     // 2. Filter the deleted item out of the page\n//     data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n//     // 3. Put the items back\n//     cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n//   };\n//   return (\n//     <Mutation\n//       mutation={DELETE_ITEM_MUTATION}\n//       variables={{ id }}\n//       update={update}\n//     >\n//       {(deleteItem, { error }) => (\n//         <button\n//           onClick={() => {\n//             if (confirm('Are you sure you wanted to delete this?')) {\n//               deleteItem().catch(err => {\n//                 alert(err.message);\n//               });\n//             }\n//           }}\n//         >\n//           {children}\n//         </button>\n//       )}\n//     </Mutation>\n//   );\n// };\n// export default DeleteItem;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/DeleteItem.js"],"names":["React","useMutation","gql","ALL_ITEMS_QUERY","DELETE_ITEM_MUTATION","DeleteItem","children","id","update","cache","payload","data","readQuery","query","items","filter","item","deleteItem","writeQuery","error","confirm","variables","catch","err","alert","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,OAAO,MAAMC,oBAAoB,GAAGF,GAAI;;;;;;CAAjC;;AAQP,MAAMG,UAAU,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAsB;AACvC,QAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACjC;AACA;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,MAAAA,KAAK,EAAEV;AAAT,KAAhB,CAAb,CAHiC,CAIjC;;AACAQ,IAAAA,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACG,KAAL,CAAWC,MAAX,CACXC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYG,OAAO,CAACC,IAAR,CAAaM,UAAb,CAAwBV,EADjC,CAAb,CALiC,CAQjC;;AACAE,IAAAA,KAAK,CAACS,UAAN,CAAiB;AAAEL,MAAAA,KAAK,EAAEV,eAAT;AAA0BQ,MAAAA;AAA1B,KAAjB;AACD,GAVD;;AAWA,QAAM,CAACM,UAAD,EAAa;AAAEE,IAAAA;AAAF,GAAb,IAA0BlB,WAAW,CAACG,oBAAD,EAAuB;AAAEI,IAAAA;AAAF,GAAvB,CAA3C;AAEA,SACE;AACE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIY,OAAO,CAAC,yCAAD,CAAX,EAAwD;AACtDH,QAAAA,UAAU,CAAC;AAAEI,UAAAA,SAAS,EAAE;AAAEd,YAAAA;AAAF;AAAb,SAAD,CAAV,CAAkCe,KAAlC,CAAwCC,GAAG,IAAI;AAC7CC,UAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,SAFD;AAGD;AACF,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGnB,QATH,CADF;AAaD,CA3BD;;AA6BA,eAAeD,UAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { ALL_ITEMS_QUERY } from './Items';\n\nexport const DELETE_ITEM_MUTATION = gql`\n  mutation DELETE_ITEM_MUTATION($id: ID!) {\n    deleteItem(id: $id) {\n      id\n    }\n  }\n`;\n\nconst DeleteItem = ({ children, id }) => {\n  const update = (cache, payload) => {\n    // Manually update the cache on the client so it matches the server\n    // 1. Read the cache for items we want\n    const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n    // 2. Filter the deleted item out of the page\n    data.items = data.items.filter(\n      item => item.id !== payload.data.deleteItem.id\n    );\n    // 3. Put the items back\n    cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n  };\n  const [deleteItem, { error }] = useMutation(DELETE_ITEM_MUTATION, { update });\n\n  return (\n    <button\n      onClick={() => {\n        if (confirm('Are you sure you wanted to delete this?')) {\n          deleteItem({ variables: { id } }).catch(err => {\n            alert(err.message);\n          });\n        }\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default DeleteItem;\n\n// import React from 'react';\n// import { Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import { ALL_ITEMS_QUERY } from './Items';\n\n// export const DELETE_ITEM_MUTATION = gql`\n//   mutation DELETE_ITEM_MUTATION($id: ID!) {\n//     deleteItem(id: $id) {\n//       id\n//     }\n//   }\n// `;\n\n// const DeleteItem = ({ children, id }) => {\n//   const update = (cache, payload) => {\n//     // Manually update the cache on the client so it matches the server\n//     // 1. Read the cache for items we want\n//     const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n//     // 2. Filter the deleted item out of the page\n//     data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n//     // 3. Put the items back\n//     cache.writeQuery({ query: ALL_ITEMS_QUERY, data });\n//   };\n\n//   return (\n//     <Mutation\n//       mutation={DELETE_ITEM_MUTATION}\n//       variables={{ id }}\n//       update={update}\n//     >\n//       {(deleteItem, { error }) => (\n//         <button\n//           onClick={() => {\n//             if (confirm('Are you sure you wanted to delete this?')) {\n//               deleteItem().catch(err => {\n//                 alert(err.message);\n//               });\n//             }\n//           }}\n//         >\n//           {children}\n//         </button>\n//       )}\n//     </Mutation>\n//   );\n// };\n\n// export default DeleteItem;\n"]},"metadata":{},"sourceType":"module"}