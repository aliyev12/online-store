{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/UpdateItem.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_ITEM_MUTATION(\\n    $title: String!\\n    $description: String!\\n    $price: Int!\\n  ) {\\n    updateItem(\\n      title: $title\\n      description: $description\\n      price: $price\\n    ) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ITEM_QUERY($id: ID!) {\\n    item(where: { id: $id }) {\\n      id\\n      title\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nexport var SINGLE_ITEM_QUERY = gql(_templateObject());\nexport var UPDATE_ITEM_MUTATION = gql(_templateObject2());\n\nvar UpdateItem = function UpdateItem(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      price = _useState6[0],\n      setPrice = _useState6[1];\n\n  var handleUpdateItem =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, updateItemMutation) {\n      var variables, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              console.log('updating item..');\n              variables = {\n                id: props.id\n              };\n              title ? variables.title = title : null;\n              description ? variables.description = description : null;\n              price ? variables.price = price : null;\n              console.log('variables = ', variables);\n              _context.next = 9;\n              return updateItemMutation({\n                variables: variables\n              });\n\n            case 9:\n              res = _context.sent;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateItem(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Query, {\n    query: SINGLE_ITEM_QUERY,\n    variables: {\n      id: props.id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading;\n    if (loading) React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Loading...\");\n    if (!data.item) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"No item for ID \", props.id);\n    return React.createElement(Mutation, {\n      mutation: UPDATE_ITEM_MUTATION,\n      variables: {\n        title: title,\n        description: description,\n        price: price\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, function (updateItem, _ref3) {\n      var loading = _ref3.loading,\n          error = _ref3.error;\n      return React.createElement(Form, {\n        onSubmit: function onSubmit(e) {\n          return handleUpdateItem(e, updateItem);\n        },\n        method: \"post\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Error, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Title\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        name: \"title\",\n        placeholder: \"Title\",\n        required: true,\n        defaultValue: data.item.title,\n        onChange: function onChange(e) {\n          return setTitle(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: \"price\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Price\", React.createElement(\"input\", {\n        type: \"number\",\n        id: \"price\",\n        name: \"price\",\n        placeholder: \"Price\",\n        required: true,\n        defaultValue: data.item.price,\n        onChange: function onChange(e) {\n          return setPrice(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Description\", React.createElement(\"textarea\", {\n        id: \"description\",\n        name: \"description\",\n        placeholder: \"Enter a Description\",\n        required: true,\n        defaultValue: data.item.description,\n        onChange: function onChange(e) {\n          return setDescription(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Submit\")));\n    });\n  });\n};\n\nexport default UpdateItem;","map":{"version":3,"sources":["/Users/abdulaliyev/tut/nextjs-graphql/online-store/frontend/components/UpdateItem.js"],"names":["React","useState","Mutation","Query","gql","Router","Form","formatMoney","Error","SINGLE_ITEM_QUERY","UPDATE_ITEM_MUTATION","UpdateItem","props","title","setTitle","description","setDescription","price","setPrice","handleUpdateItem","e","updateItemMutation","preventDefault","console","log","variables","id","res","data","loading","item","updateItem","error","target","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,IAAMC,iBAAiB,GAAGL,GAAH,mBAAvB;AAWP,OAAO,IAAMM,oBAAoB,GAAGN,GAAH,oBAA1B;;AAmBP,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,kBACAX,QAAQ,CAAC,EAAD,CADR;AAAA;AAAA,MACnBY,KADmB;AAAA,MACZC,QADY;;AAAA,mBAEYb,QAAQ,CAAC,EAAD,CAFpB;AAAA;AAAA,MAEnBc,WAFmB;AAAA,MAENC,cAFM;;AAAA,mBAGAf,QAAQ,CAAC,CAAD,CAHR;AAAA;AAAA,MAGnBgB,KAHmB;AAAA,MAGZC,QAHY;;AAK1B,MAAMC,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,CAAP,EAAUC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBD,cAAAA,CAAC,CAACE,cAAF;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACMC,cAAAA,SAHiB,GAGL;AAChBC,gBAAAA,EAAE,EAAEd,KAAK,CAACc;AADM,eAHK;AAMvBb,cAAAA,KAAK,GAAGY,SAAS,CAACZ,KAAV,GAAkBA,KAArB,GAA6B,IAAlC;AACAE,cAAAA,WAAW,GAAGU,SAAS,CAACV,WAAV,GAAwBA,WAA3B,GAAyC,IAApD;AACAE,cAAAA,KAAK,GAAGQ,SAAS,CAACR,KAAV,GAAkBA,KAArB,GAA6B,IAAlC;AACAM,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,SAA5B;AATuB;AAAA,qBAULJ,kBAAkB,CAAC;AAAEI,gBAAAA,SAAS,EAATA;AAAF,eAAD,CAVb;;AAAA;AAUjBE,cAAAA,GAViB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBR,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAaA,SACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEV,iBAAd;AAAiC,IAAA,SAAS,EAAE;AAAEiB,MAAAA,EAAE,EAAEd,KAAK,CAACc;AAAZ,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,iBAAuB;AAAA,QAApBE,IAAoB,SAApBA,IAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AACtB,QAAIA,OAAJ,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,QAAI,CAACD,IAAI,CAACE,IAAV,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmBlB,KAAK,CAACc,EAAzB,CAAP;AAChB,WACE,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAEhB,oBADZ;AAEE,MAAA,SAAS,EAAE;AACTG,QAAAA,KAAK,EAALA,KADS;AAETE,QAAAA,WAAW,EAAXA,WAFS;AAGTE,QAAAA,KAAK,EAALA;AAHS,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG,UAACc,UAAD;AAAA,UAAeF,OAAf,SAAeA,OAAf;AAAA,UAAwBG,KAAxB,SAAwBA,KAAxB;AAAA,aACC,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,kBAAAZ,CAAC;AAAA,iBAAID,gBAAgB,CAACC,CAAD,EAAIW,UAAJ,CAApB;AAAA,SAAjB;AAAsD,QAAA,MAAM,EAAC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAU,QAAA,QAAQ,EAAEH,OAApB;AAA6B,qBAAWA,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,WAAW,EAAC,OAJd;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,YAAY,EAAED,IAAI,CAACE,IAAL,CAAUjB,KAN1B;AAOE,QAAA,QAAQ,EAAE,kBAAAO,CAAC;AAAA,iBAAIN,QAAQ,CAACM,CAAC,CAACa,MAAF,CAASC,KAAV,CAAZ;AAAA,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAaE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,WAAW,EAAC,OAJd;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,YAAY,EAAEN,IAAI,CAACE,IAAL,CAAUb,KAN1B;AAOE,QAAA,QAAQ,EAAE,kBAAAG,CAAC;AAAA,iBAAIF,QAAQ,CAACE,CAAC,CAACa,MAAF,CAASC,KAAV,CAAZ;AAAA,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAbF,EAyBE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,WAAW,EAAC,qBAHd;AAIE,QAAA,QAAQ,MAJV;AAKE,QAAA,YAAY,EAAEN,IAAI,CAACE,IAAL,CAAUf,WAL1B;AAME,QAAA,QAAQ,EAAE,kBAAAK,CAAC;AAAA,iBAAIJ,cAAc,CAACI,CAAC,CAACa,MAAF,CAASC,KAAV,CAAlB;AAAA,SANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAzBF,EAoCE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApCF,CAFF,CADD;AAAA,KARH,CADF;AAsDD,GA1DH,CADF;AA8DD,CAhFD;;AAkFA,eAAevB,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\nexport const SINGLE_ITEM_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nexport const UPDATE_ITEM_MUTATION = gql`\n  mutation UPDATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n  ) {\n    updateItem(\n      title: $title\n      description: $description\n      price: $price\n    ) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateItem = props => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [price, setPrice] = useState(0);\n\n  const handleUpdateItem = async (e, updateItemMutation) => {\n    e.preventDefault();\n    console.log('updating item..');\n    const variables = {\n      id: props.id,\n    };\n    title ? variables.title = title : null;\n    description ? variables.description = description : null;\n    price ? variables.price = price : null;\n    console.log('variables = ', variables);\n    const res = await updateItemMutation({ variables });\n  }\n\n  return (\n    <Query query={SINGLE_ITEM_QUERY} variables={{ id: props.id }}>\n      {({ data, loading }) => {\n        if (loading) <p>Loading...</p>;\n        if (!data.item) return <p>No item for ID {props.id}</p>\n        return (\n          <Mutation\n            mutation={UPDATE_ITEM_MUTATION}\n            variables={{\n              title,\n              description,\n              price\n            }}\n          >\n            {(updateItem, { loading, error }) => (\n              <Form onSubmit={e => handleUpdateItem(e, updateItem)} method=\"post\">\n                <Error error={error} />\n                <fieldset disabled={loading} aria-busy={loading}>\n                  <label htmlFor=\"title\">\n                    Title\n                    <input\n                      type=\"text\"\n                      id=\"title\"\n                      name=\"title\"\n                      placeholder=\"Title\"\n                      required\n                      defaultValue={data.item.title}\n                      onChange={e => setTitle(e.target.value)}\n                    />\n                  </label>\n                  <label htmlFor=\"price\">\n                    Price\n                    <input\n                      type=\"number\"\n                      id=\"price\"\n                      name=\"price\"\n                      placeholder=\"Price\"\n                      required\n                      defaultValue={data.item.price}\n                      onChange={e => setPrice(e.target.value)}\n                    />\n                  </label>\n                  <label htmlFor=\"title\">\n                    Description\n                    <textarea\n                      id=\"description\"\n                      name=\"description\"\n                      placeholder=\"Enter a Description\"\n                      required\n                      defaultValue={data.item.description}\n                      onChange={e => setDescription(e.target.value)}\n                    />\n                  </label>\n                  <button type=\"submit\">Submit</button>\n                </fieldset>\n              </Form>\n            )}\n          </Mutation>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default UpdateItem;\n"]},"metadata":{},"sourceType":"module"}