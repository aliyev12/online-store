{"version":3,"file":"static/webpack/static/development/pages/order.js.253b70746f5c85de1d3f.hot-update.js","sources":["webpack:///./components/Order.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport { gql } from 'apollo-boost';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\n\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nconst Order = ({ id }) => {\n  const { data, error, loading } = useQuery(SINGLE_ORDER_QUERY, {\n    variables: { id }\n  });\n  if (error) return <Error error={error} />;\n  if (loading) return <p>Loading...</p>;\n  const order = data.order;\n  if (!order) return <p>This order doesn't exist</p>;\n  return (\n    <OrderStyles>\n      <Head>\n        <title>Sick Fits - Order {order.id}</title>\n      </Head>\n      <p>\n        <span>Order ID:</span>\n        <span>{id}</span>\n      </p>\n      <p>\n        <span>Charge</span>\n        <span>{order.charge}</span>\n      </p>\n      <p>\n        <span>Date</span>\n        <span>{format(new Date(order.createdAt), 'MMMM d, yyyy HH:mm')}</span>\n      </p>\n      <p>\n        <span>Order Total</span>\n        <span>{order.total}</span>\n      </p>\n    </OrderStyles>\n  );\n};\n\nOrder.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport default Order;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAqBA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}